<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FlyingFang的自留地</title>
    <link>http://flyingfang.github.io/</link>
    <description>Recent content on FlyingFang的自留地</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 22 Feb 2018 15:40:05 +0800</lastBuildDate>
    
        <atom:link href="http://flyingfang.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>基于Kubernetes的动态扩缩容（一）：HPA源码分析</title>
      <link>http://flyingfang.github.io/post/kubernetes-autoscaling-01/</link>
      <pubDate>Tue, 09 Jun 2020 15:21:48 +0800</pubDate>
      
      <guid>http://flyingfang.github.io/post/kubernetes-autoscaling-01/</guid>
      
        <description>&lt;h2 id=&#34;hpa&#34;&gt;HPA&lt;/h2&gt;
&lt;p&gt;HPA（Horizontal Pod Autoscaler）：自动水平扩缩容模块。&lt;/p&gt;
&lt;p&gt;HPA有两个大版本v1、v2。v1版本仅支持基于CPU使用率的动态扩缩容，v2版本支持根据自定义指标进行动态扩缩容。&lt;/p&gt;
&lt;p&gt;HPA最小的副本数为1，未来有望支持scale to zero。市面上的三方产品多支持scale to zero。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://pic.flyingfang.com/notes/image-20200605132252547.png&#34; alt=&#34;image-20200605132252547&#34;&gt;&lt;/p&gt;
&lt;p&gt;HPA不支持不可扩展的资源，例如daemonset等。&lt;/p&gt;
&lt;h3 id=&#34;架构及主要流程&#34;&gt;架构及主要流程&lt;/h3&gt;
&lt;p&gt;HPA由kubernetes的controller manager控制，整体流程如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://pic.flyingfang.com/notes/v2-935967c7cf69718563e24f29e725fbd5_1440w-20200609111652330.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;控制器从metrics-server 模块获取资源指标（支持自定义metrics-server模块），控制器会从每个metrics-server获取指标进行计算最终副本。&lt;/p&gt;
&lt;h3 id=&#34;概念&#34;&gt;概念&lt;/h3&gt;
&lt;p&gt;指标API种类：&lt;/p&gt;
&lt;p&gt;metrics.k8s.io：由metric-server提供。示例：&lt;a href=&#34;https://github.com/kubernetes-retired/heapster&#34;&gt;heapster&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;custom.metrics.k8s.io：由云厂商的adapter提供。示例：&lt;a href=&#34;https://github.com/DirectXMan12/k8s-prometheus-adapter&#34;&gt;k8s-prometheus-adapter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;external.metrics.k8s.io：由用户指标适配器提供。示例：&lt;a href=&#34;https://github.com/GoogleCloudPlatform/k8s-stackdriver&#34;&gt;k8s-stackdriver&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;扩缩容算法&#34;&gt;扩缩容算法&lt;/h3&gt;
&lt;h4 id=&#34;算法概述&#34;&gt;算法概述&lt;/h4&gt;
&lt;p&gt;算法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;nv&#34;&gt;desiredReplicas&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; ceil&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;currentReplicas * &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt; currentMetricValue / desiredMetricValue &lt;span class=&#34;o&#34;&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;特殊情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;正在关闭的Pod或失败的Pod不会被纳入计算。&lt;/li&gt;
&lt;li&gt;在Pod指标信息缺失时，会被搁置，在最终确定伸缩值的时候再纳入计算。&lt;/li&gt;
&lt;li&gt;使用CPU指标计算时，会有一个可设定的等待时间，未就绪和刚就绪的Pod也会被搁置。&lt;/li&gt;
&lt;li&gt;指标信息缺失的Pod，会被更保守的计算，以降低伸缩的幅度。在需要缩容时，pod被当作100%占用计算；在需要扩容时，pod被当作0%占用计算。&lt;/li&gt;
&lt;li&gt;未就绪和刚就绪的Pod，会被假定为占用0%计算。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;伸缩基本规则&#34;&gt;伸缩基本规则&lt;/h4&gt;
&lt;p&gt;自动伸缩控制器流程：&lt;/p&gt;
&lt;p&gt;每隔1个同步周期（可配置，horizontal-pod-autoscaler-sync-period）,检查所有的HPA。进入伸缩计算流程。&lt;/p&gt;
&lt;p&gt;伸缩基本流程：&lt;/p&gt;
&lt;p&gt;相关代码：&lt;a href=&#34;https://github.com/kubernetes/kubernetes/blob/1bc526aa6c310b915e7ad57b4442deec7328aad2/pkg/controller/podautoscaler/horizontal.go#L539&#34;&gt;pkg/controller/podautoscaler/horizontal.go::reconcileAutoscaler&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;参与计算的变量说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;currentReplicas 表示目标资源（eg Deployment）的当前副本数（Spec.Replicas）。&lt;/li&gt;
&lt;li&gt;minReplicas 表示HPA配置的目标资源最小副本数。&lt;/li&gt;
&lt;li&gt;maxReplicas 表示HPA配置的目标资源最大副本数。&lt;/li&gt;
&lt;li&gt;desiredReplicas 表示目标资源本次伸缩的期望副本数。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;currentReplicas为0，且设置的minReplicas不等于0，则会跳过该资源的自动伸缩。&lt;/li&gt;
&lt;li&gt;如果currentReplicas &amp;gt; maxReplicas，则desiredReplicas = maxReplicas。&lt;/li&gt;
&lt;li&gt;如果currentReplicas &amp;lt; minReplicas，则desiredReplicas = minReplicas。&lt;/li&gt;
&lt;li&gt;不满足上述条件，则通过metrics计算所期望的副本数（按指标类型进行相应的伸缩算法计算，见&lt;a href=&#34;#%E5%90%84%E6%8C%87%E6%A0%87%E7%B1%BB%E5%9E%8B%E4%BC%B8%E7%BC%A9%E8%AE%A1%E7%AE%97%E7%AE%97%E6%B3%95&#34;&gt;各指标类型伸缩计算算法&lt;/a&gt;）。&lt;/li&gt;
&lt;li&gt;当通过metrics计算的所期望的副本数与当前副本数不同，则判定是否配置了缩放行为，如果未指定行为，则按照标准的缩放建议计算最终期望副本数。&lt;/li&gt;
&lt;li&gt;当配置了缩放行为，会按照配置的行为进行计算最终的期望副本数。&lt;/li&gt;
&lt;li&gt;按照最终期望副本数更新目标资源。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;各指标类型伸缩计算算法&#34;&gt;各指标类型伸缩计算算法&lt;/h4&gt;
&lt;p&gt;相关代码：&lt;a href=&#34;https://github.com/kubernetes/kubernetes/blob/1bc526aa6c310b915e7ad57b4442deec7328aad2/pkg/controller/podautoscaler/horizontal.go#L302&#34;&gt;pkg/controller/podautoscaler/horizontal.go::computeReplicasForMetric&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;目前支持四种指标类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Object（v2beta1/2）：k8s内置对象的指标，例如ingress对象的hits-per-second指标。代码细节：&lt;a href=&#34;https://github.com/kubernetes/kubernetes/blob/1bc526aa6c310b915e7ad57b4442deec7328aad2/pkg/controller/podautoscaler/horizontal.go#L368&#34;&gt;pkg/controller/podautoscaler/horizontal.go::computeStatusForObjectMetric&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Pods（v2beta1/2）：当前扩容目标中每个pod的指标，例如每秒处理的事务数（transactions-processed-per-second）指标。代码细节：&lt;a href=&#34;https://github.com/kubernetes/kubernetes/blob/1bc526aa6c310b915e7ad57b4442deec7328aad2/pkg/controller/podautoscaler/horizontal.go#L416&#34;&gt;pkg/controller/podautoscaler/horizontal.go::computeStatusForPodsMetric&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Resource（v2beta1/2）：已知的系统资源指标，例如CPU、内存等。代码细节：&lt;a href=&#34;https://github.com/kubernetes/kubernetes/blob/1bc526aa6c310b915e7ad57b4442deec7328aad2/pkg/controller/podautoscaler/horizontal.go#L439&#34;&gt;pkg/controller/podautoscaler/horizontal.go::computeStatusForResourceMetric&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;External（v2beta1/2）：与kubernetes对象无关的指标，例如队列长度等。代码细节：&lt;a href=&#34;https://github.com/kubernetes/kubernetes/blob/1bc526aa6c310b915e7ad57b4442deec7328aad2/pkg/controller/podautoscaler/horizontal.go#L486&#34;&gt;pkg/controller/podautoscaler/horizontal.go::computeStatusForExternalMetric&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;object&#34;&gt;Object：&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;Object&lt;/strong&gt;类型指标支持数值及平均值类型，会从metric server获取相关的指标。依据当前值与目标值计算出比率，结合当前副本数计算出期望副本数。&lt;/p&gt;
&lt;h5 id=&#34;podresources&#34;&gt;Pod&amp;amp;Resources：&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;Pod&lt;/strong&gt;类型与Resource类型指标底层计算方法相似：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从metric server获取指定指标值。&lt;/li&gt;
&lt;li&gt;获取资源的Pod列表，将Pod进行分组（ignore、missing·、normal）其中Pending的Pod会被忽略，未获得指标的Pod也会被排除计算。如果是进行CPU利用率的计算，刚启动的Pod也会被忽略和Not Ready的Pod都会被忽略。&lt;/li&gt;
&lt;li&gt;将Ready的Pod相关的指标和目标值进行计算，计算出利用率。&lt;/li&gt;
&lt;li&gt;利用率小于容忍比率的，忽略扩缩容行为。&lt;/li&gt;
&lt;li&gt;当存在指标缺失的Pod （missing）时，计算规则会更趋于保守。缩容时，将缺失指标的Pod算作100%目标利用率。扩容时，将缺失指标的Pod算作0%利用率。并进行重新计算，获得最终的期望值。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Resource&lt;/strong&gt;类型中CPU 利用率计算方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;平均 CPU 利用率 = 所有 Pod 使用的 CPU mCore / 所有 Pod 请求的 CPU mCore&lt;/li&gt;
&lt;li&gt;利用率比例 = 平均 CPU 利用率 / 目标 CPU 利用率&lt;/li&gt;
&lt;li&gt;伸缩到的数量 = ceil( 利用率比例 * Status.Replicas )
&lt;ul&gt;
&lt;li&gt;当容忍度设置为0.1时，利用率比例不在 [0.9, 1.1] 区间，才能进行伸缩，防止抖动&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;本次可以伸缩到的数量 = min( 伸缩到的数量, max( Status.Replicas * 2, 4 ) )&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;external&#34;&gt;External：&lt;/h5&gt;
&lt;p&gt;External类型指标支持数值及平均值类型，会从metric server获取相关的指标。依据当前值与目标值计算出比率，结合当前副本数计算出期望副本数。&lt;/p&gt;
&lt;h4 id=&#34;防抖动设计&#34;&gt;防抖动设计&lt;/h4&gt;
&lt;p&gt;缩容的冷却时间窗口：&lt;/p&gt;
&lt;p&gt;缩容有一个缩容冷却时间窗口。在缩容冷却时间窗口内，不会触发缩容行为。防止一段时间内因为指标翻动造成的频繁扩缩容。缩容稳定窗口不仅是一个全局配置，也可以在HPA的扩缩容行为中配置。&lt;/p&gt;
&lt;p&gt;最小缩放容忍度：&lt;/p&gt;
&lt;p&gt;缩放容忍度指在缩放过程中目标值与当前值差距不大时，可以忽略相应的缩放行为。计算公式：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;（1-当前值/目标值）&amp;lt; 容忍度
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;标准缩放建议&#34;&gt;标准缩放建议&lt;/h4&gt;
&lt;p&gt;标准缩放建议为按照指标计算出相应期望值后，提供一定的规则进行再次校准，以达到削峰和去抖动的作用。&lt;/p&gt;
&lt;p&gt;相关代码：&lt;a href=&#34;https://github.com/kubernetes/kubernetes/blob/1bc526aa6c310b915e7ad57b4442deec7328aad2/pkg/controller/podautoscaler/horizontal.go#L701&#34;&gt;pkg/controller/podautoscaler/horizontal.go::normalizeDesiredReplicas&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在稳定时间窗口内（通过horizontal-pod-autoscaler-downscale-stabilization配置），期望值会被校准为上一次期望值（及原值）。以达到去抖动。&lt;/li&gt;
&lt;li&gt;最大扩容限制数 = max(scaleUpLimitFactor*currentReplicas, scaleUpLimitMinimum)。其中扩容限制步长（scaleUpLimitFactor）为2，最小扩容限制（scaleUpLimitMinimum）为4。最大扩容限制可以防止指标激增导致扩容数过多。&lt;/li&gt;
&lt;li&gt;此次的最大扩容数=max(最大扩容限制数, 配置的maxReplicas)，当前期望值&amp;lt;配置的minReplicas时，期望值校准为配置的minReplicas。当前期望值&amp;gt;此次的最大扩容数时，期望值校准为此次的最大扩容数。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;可配置的扩缩容行为&#34;&gt;可配置的扩缩容行为&lt;/h4&gt;
&lt;p&gt;支持在hpa的配置文件中指定扩容和缩容的行为策略。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;多条扩缩容策略的处理规则&lt;/strong&gt;：最终确定的扩缩容期望副本数会依据多个策略综合考量，按照指定的选取策略决定最终的期望值。默认的缩容选取策略为Max（取最大值），故会选取多个策略期望值中的最大值。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;k&#34;&gt;behavior&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;scaleDown&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;policies&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Pods&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;periodSeconds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Percent&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;periodSeconds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;当总副本数大于40时，此时第二条缩容策略显然更大，故按照第二条策略缩容；当总副本数小于等于40时，按照第一条策略，每次缩容4个。&lt;code&gt;periodSeconds&lt;/code&gt;表示缩容周期。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;选取策略&lt;/strong&gt;可以通过 &lt;code&gt;selectPolicy&lt;/code&gt;设定，可以为Max（最大值）、Min（最小值）、Disabled（关闭此方向扩缩容）。扩容时默认的策略为Max，缩容时默认的策略为Min。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;伸缩策略&lt;/strong&gt;类型可以选择Pods、Percent。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;稳定时间：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;支持在配置文件中指定稳定窗口时间，示例指定稳定窗口为300s：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;k&#34;&gt;scaleDown&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;stabilizationWindowSeconds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;300&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;默认的扩缩容行为yaml：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;k&#34;&gt;behavior&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;scaleDown&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;stabilizationWindowSeconds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;300&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;policies&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Percent&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;periodSeconds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;scaleUp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;stabilizationWindowSeconds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;policies&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Percent&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;periodSeconds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Pods&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;periodSeconds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;selectPolicy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Max&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;可配置参数说明&#34;&gt;可配置参数说明&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;默认&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;horizontal-pod-autoscaler-sync-period&lt;/td&gt;
&lt;td&gt;15s&lt;/td&gt;
&lt;td&gt;controller同步HPA信息的同步周期&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;horizontal-pod-autoscaler-downscale-stabilization&lt;/td&gt;
&lt;td&gt;5m&lt;/td&gt;
&lt;td&gt;缩容稳定窗口，缩容间隔时间（v1.12支持）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;horizontal-pod-autoscaler-tolerance&lt;/td&gt;
&lt;td&gt;0.1&lt;/td&gt;
&lt;td&gt;最小缩放容忍度：计算出的期望值和实际值的比率&amp;lt;最小容忍比率，则不进行扩缩容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;horizontal-pod-autoscaler-cpu-initialization-period&lt;/td&gt;
&lt;td&gt;5m&lt;/td&gt;
&lt;td&gt;pod刚启动时，一定时间内的CPU使用率数据不参与计算。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;horizontal-pod-autoscaler-initial-readiness-delay&lt;/td&gt;
&lt;td&gt;30s&lt;/td&gt;
&lt;td&gt;扩容等待pod ready的时间（无法得知pod何时就绪）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;参考文档&#34;&gt;参考文档&lt;/h3&gt;
&lt;p&gt;设计文档（旧）：&lt;a href=&#34;https://github.com/kubernetes/community/blob/master/contributors/design-proposals/autoscaling/horizontal-pod-autoscaler.md&#34;&gt;Horizontal Pod Autoscaling&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1.0设计文档：&lt;a href=&#34;https://github.com/kubernetes/kubernetes/blob/release-1.0/docs/proposals/autoscaling.md&#34;&gt;autoscaling&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.0设计提案：&lt;a href=&#34;https://github.com/kubernetes/community/blob/master/contributors/design-proposals/autoscaling/hpa-v2.md&#34;&gt;Horizontal Pod Autoscaler with Arbitrary Metrics&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;官网：&lt;a href=&#34;https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/&#34;&gt;Horizontal Pod Autoscaler&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;官网演练：&lt;a href=&#34;https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/&#34;&gt;Horizontal Pod Autoscaler Walkthrough&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;自定义指标服务 GitHub：&lt;a href=&#34;https://github.com/kubernetes-sigs/custom-metrics-apiserver&#34;&gt;custom-metrics-apiserver&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;external metrics提案：&lt;a href=&#34;https://github.com/kubernetes/community/blob/master/contributors/design-proposals/instrumentation/external-metrics-api.md&#34;&gt;External Metrics API&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>容器存储驱动Device Mapper系列（一）：原理解析</title>
      <link>http://flyingfang.github.io/post/devicemapper-theory/</link>
      <pubDate>Wed, 25 Dec 2019 13:24:37 +0800</pubDate>
      
      <guid>http://flyingfang.github.io/post/devicemapper-theory/</guid>
      
        <description>&lt;h2 id=&#34;device-mapper简介&#34;&gt;Device Mapper简介&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Device Mapper&lt;/code&gt;是linux内核将物理块设备映射到虚拟块设备的一种框架，它是当下LVM (Linux Volume Manager 2 version) 、EVMS (Enterprise Volume Management System)、dmraid (Device Mapper Raid Tool) 等技术的基础。因此，&lt;code&gt;Device Mapper&lt;/code&gt;是工作于块级别（block），并不是工作在文件级别（file）。&lt;/p&gt;
&lt;h2 id=&#34;device-mapper架构&#34;&gt;Device Mapper架构&lt;/h2&gt;
&lt;h3 id=&#34;device-mapper-组成&#34;&gt;Device Mapper 组成&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Device Mapper&lt;/code&gt; 主要分为用户空间部分和内核空间部分两部分。&lt;/p&gt;
&lt;p&gt;用户空间部分主要负责配置具体的策略和控制逻辑。包含device mapper 库以及 dmsetup 工具。&lt;/p&gt;
&lt;p&gt;内核空间部分主要提供完成这些用户空间策略所需要的机制。Device Mapper在内核中通过模块化的Target Driver插件实现了对 IO 请求的过滤或重定向等工作，这体现了linux内核设计中策略和机制分离的原则。如docker中使用的Thin Provisioning Snapshot功能，就是一个插件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xflying-blog.bj.bcebos.com/xflying-blog%2Fdevicemapper-theory%2Fdevice-mapper-kernel-architecture.png&#34; alt=&#34;Device Mapper架构图&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;device-mapper对象结构&#34;&gt;Device Mapper对象结构&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Device Mapper&lt;/code&gt;有三个重要的对象概念：映射设备 (Mapped Device)，映射表 (Map Table)，目标设备 (Target Device)。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;映射设备：即逻辑设备，映射设备可向下寻找到对应支撑的目标设备。&lt;/li&gt;
&lt;li&gt;映射表：存储映射设备和目标设备的映射关系。映射表有映射设备的起始地址、范围和表示在目标设备的地址偏移量以及Target类型信息。（注：这些地址和偏移量都是以磁盘的扇区为单位的，即 512 个字节大小，所以，当你看到128的时候，其实表示的是128*512=64K）&lt;/li&gt;
&lt;li&gt;目标设备：可以是映射设备或者物理设备。这种映射关系是可以迭代下去的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://xflying-blog.bj.bcebos.com/xflying-blog%2Fdevicemapper-theory%2Fdevice-mapper-object-relation.png&#34; alt=&#34;Device Mapper对象关系&#34;&gt;&lt;/p&gt;
&lt;p&gt;映射表，是由用户空间创建，传递到内核空间。映射驱动在内核空间是插件，已实现的映射驱动（Target Driver） 插件包括软 raid、软加密、逻辑卷条带、多路径（mulitpath）、镜像（mirror）、快照（snapshot）等。&lt;/p&gt;
&lt;h2 id=&#34;docker中的device-mapper&#34;&gt;Docker中的Device Mapper&lt;/h2&gt;
&lt;h3 id=&#34;docker中的device-mapper核心技术&#34;&gt;Docker中的Device Mapper核心技术&lt;/h3&gt;
&lt;p&gt;Docker的 &lt;code&gt;devicemapper&lt;/code&gt;有三个核心概念：写时复制（copy on-write），精简配置（thin-provisioning），快照（snapshot）。&lt;/p&gt;
&lt;h4 id=&#34;写时复制&#34;&gt;写时复制&lt;/h4&gt;
&lt;p&gt;容器的镜像是分层的，每层称为一个 branch，除顶层 branch 具有读写（rw）权限，所有的 branch 均为只读（ro）权限。&lt;/p&gt;
&lt;p&gt;容器文件的读写：当我们需要修改一个底层 branch 的文件时，会将底层 branch 的文件复制到顶层 branch，再进行修改，此时底层 branch 的文件不变。&lt;/p&gt;
&lt;p&gt;容器文件的删除：当我们删除一个顶层 branch 的文件时，会在顶层 branch 创建一个 &lt;code&gt;.wh&lt;/code&gt;前置的隐藏文件，从而实现文件的删除，实际并未真的删除文件。&lt;/p&gt;
&lt;p&gt;而 &lt;code&gt;devicemapper&lt;/code&gt;支持在块级别（block）写时复制。&lt;/p&gt;
&lt;h4 id=&#34;快照技术&#34;&gt;快照技术&lt;/h4&gt;
&lt;p&gt;快照技术是对指定数据集合的一个完全可用拷贝，快照是指向保存在存储设备中的数据的引用标记或指针，它可以在不中断服务运行的情况下操作。&lt;/p&gt;
&lt;p&gt;接下来的文件修改或者增删动作，均不会覆盖原本数据所在的磁盘区块，而是将修改部分写入其它可用的磁盘区块中。&lt;/p&gt;
&lt;p&gt;快照只对变化的部分进行拷贝，所以在读多写少的场景下，对于磁盘空间占用不大。&lt;/p&gt;
&lt;p&gt;快照大小耗尽时，支持对快照大小进行调整。&lt;/p&gt;
&lt;h4 id=&#34;精简配置&#34;&gt;精简配置&lt;/h4&gt;
&lt;p&gt;Thin-Provisioning 是虚拟化技术的一种，实际上是一种超卖，以提高存储空间利用率。&lt;/p&gt;
&lt;p&gt;Fat-Provisioning 就是传统的存储分配方式，从一开始就固定分配了存储空间。而Thin-Provisioning是动态分配的，是一种使用时分配。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xflying-blog.bj.bcebos.com/xflying-blog%2Fdevicemapper-theory%2Ffat-provisioning.jpg&#34; alt=&#34;Fat-Provisioning&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xflying-blog.bj.bcebos.com/xflying-blog%2Fdevicemapper-theory%2Fthin-provisioning.jpg&#34; alt=&#34;Thin-Provisioning&#34;&gt;&lt;/p&gt;
&lt;p&gt;再举一个例子：用户向服务器申请10TB 的存储资源，往往这个数值为峰值，根据使用情况估计，分配2TB 即可。因此系统管理员准备了 2TB 的物理存储，并给服务器分配 10TB 的虚拟卷。服务器即可基于占虚拟卷容量1/5的现有物理磁盘池开始运行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xflying-blog.bj.bcebos.com/xflying-blog%2Fdevicemapper-theory%2Fthin-provisioning-example.jpg&#34; alt=&#34;Thin-Provisioning-Example&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;docker中device-mapper创建过程&#34;&gt;Docker中Device Mapper创建过程&lt;/h3&gt;
&lt;p&gt;基于docker v1.12.5，关键代码 &lt;code&gt;github.com/docker/docker/daemon/graphdriver/devmapper/deviceset.go::initDevmapper()&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;先创建一个瘦资源池（thin pool，使用瘦供给技术，存储动态分配），瘦资源池使用2块设备，一个用于存储数据（data），一个用于存储元数据（meta），包括虚拟设备和目标设备的映射表。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基于该瘦资源池创建基础设备（Base Image），Device Mapper中的逻辑设备。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;所有的镜像数据均基于该基础设备创建快照，容器层则基于镜像层创建快照。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://xflying-blog.bj.bcebos.com/xflying-blog%2Fdevicemapper-theory%2Fdevice-mapper-in-docker.png&#34; alt=&#34;Device-Mapper-in-Docker&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.ibm.com/developerworks/cn/linux/l-devmapper/index.html&#34;&gt;Linux 内核中的 Device Mapper 机制&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://coolshell.cn/articles/17200.html&#34;&gt;DOCKER基础技术：DEVICEMAPPER&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://robinle.github.io/docker/2017/03/13/Docker%E5%AD%98%E5%82%A8%E9%A9%B1%E5%8A%A8%E4%B9%8BDeviceMapper/&#34;&gt;Docker存储驱动DeviceMapper&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.infoq.cn/article/analysis-of-docker-file-system-aufs-and-devicemapper/&#34;&gt;剖析 Docker 文件系统：Aufs 与 Devicemapper&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>runc简明命令指南</title>
      <link>http://flyingfang.github.io/post/runc-cheat-sheet/</link>
      <pubDate>Wed, 18 Sep 2019 01:17:53 +0800</pubDate>
      
      <guid>http://flyingfang.github.io/post/runc-cheat-sheet/</guid>
      
        <description>&lt;h1 id=&#34;runc是什么&#34;&gt;runc是什么&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;OCI&lt;/code&gt;（Open Container Initiative）是由多家公司共同成立的项目，并由linux基金会进行管理，致力于容器运行时的标准的制定和runc的开发等工作。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;runc&lt;/code&gt; 是一个根据OCI标准创建并运行容器的一个命令行工具。runc直接与容器所依赖的cgroup/linux kernel等进行交互，负责为容器配置cgroup/namespace等启动容器所需的环境，创建启动容器的相关进程。&lt;/p&gt;
&lt;h1 id=&#34;安装&#34;&gt;安装&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;安装相关依赖&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ sudo apt install libseccomp-dev pkg-config
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;下载源码&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ go get github.com/opencontainers/runc
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;安装&lt;code&gt;v1.0.0-rc8&lt;/code&gt; 版本&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ~/go/src/github.com/opencontainers/runc
$ git checkout v1.0.0-rc8
$ make
$ sudo make install
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;验证runc安装成功&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ runc -v
runc version 1.0.0-rc8
commit: 425e105d5a03fabd737a126ad93d62a9eeede87f
spec: 1.0.1-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h1 id=&#34;准备oci-bundle&#34;&gt;准备OCI bundle&lt;/h1&gt;
&lt;p&gt;所谓的 OCI bundle 就是指容器的文件系统和一个 config.json 文件。有了容器的文件系统后我们可以通过 runc spec 命令来生成 config.json 文件。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ docker pull busybox
$ mkdir -p /tmp/mycontainer/rootfs
$ &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; /tmp/mycontainer
$ docker &lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;docker create busybox&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; tar -C rootfs -xvf -
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;现在 rootfs 目录下就是 busybox 镜像的文件系统，然后生成 config.json 文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ runc spec
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h1 id=&#34;简明示例&#34;&gt;简明示例&lt;/h1&gt;
&lt;p&gt;0.查看帮助&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ runc -h // 查看帮助
$ runc &lt;span class=&#34;nb&#34;&gt;help&lt;/span&gt; subcommand // 查看子命令帮助
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;1.利用之前准备好的OCI bundle，创建一个容器&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ runc create demo
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;2.查看当前所有的容器&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ runc list
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;3.查看容器的状态&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ runc state demo
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;4.启动容器&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ runc start demo
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;5.查看容器的进程&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ runc ps demo
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;6.在容器内执行命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ runc &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; demo ls
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;7.终止容器&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ runc &lt;span class=&#34;nb&#34;&gt;kill&lt;/span&gt; demo
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;8.删除容器&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ runc delete demo
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h1 id=&#34;常用命令&#34;&gt;常用命令&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;runc create [ -b &amp;lt;bundle-dir&amp;gt;]  &amp;lt;container-id&amp;gt;&lt;/td&gt;
&lt;td&gt;创建一个容器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;runc list&lt;/td&gt;
&lt;td&gt;查看容器列表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;runc ps &amp;lt;container-id&amp;gt;&lt;/td&gt;
&lt;td&gt;查看容器内进程&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;runc exec &amp;lt;container-id&amp;gt; ls&lt;/td&gt;
&lt;td&gt;在容器内执行命令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;runc start [&lt;!-- raw HTML omitted --&gt;]&lt;/td&gt;
&lt;td&gt;启动容器，不指定container-id则启动所有&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;runc run  [ -b &amp;lt;bundle-dir&amp;gt;] &amp;lt;container-id&amp;gt;&lt;/td&gt;
&lt;td&gt;创建并运行容器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;runc kill &amp;lt;container-id&amp;gt; [&lt;!-- raw HTML omitted --&gt;]&lt;/td&gt;
&lt;td&gt;给容器发送终止信号，默认SIGTERM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;runc pause &amp;lt;container-id&amp;gt;&lt;/td&gt;
&lt;td&gt;暂停容器内所有进程&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;runc resume &amp;lt;container-id&amp;gt;&lt;/td&gt;
&lt;td&gt;恢复容器内暂停的进程&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://www.infoq.cn/article/2017%2F02%2FDocker-Containerd-RunC&#34;&gt;Docker、Containerd、RunC&amp;hellip;：你应该知道的所有&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/sparkdev/p/9032209.html&#34;&gt;runc简介&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>【源码分析】docker（一）之dockerd、containerd、shim、runc各组件关系</title>
      <link>http://flyingfang.github.io/post/docker-reading-01/</link>
      <pubDate>Mon, 16 Sep 2019 21:38:53 +0800</pubDate>
      
      <guid>http://flyingfang.github.io/post/docker-reading-01/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;以下代码分析基于docker server 1.12.5 版本。&lt;/p&gt;
&lt;p&gt;相关代码：https://github.com/moby/moby/tree/v1.12.5&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;docker各组件简介&#34;&gt;docker各组件简介&lt;/h1&gt;
&lt;p&gt;docker相关的组件有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;docker：docker的命令行客户端。&lt;/li&gt;
&lt;li&gt;dockerd：docker server daemon程序。&lt;/li&gt;
&lt;li&gt;docker-containerd：高性能容器运行时。等同于&lt;code&gt;containerd&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;docker-containerd-ctr：&lt;code&gt;docker-containerd&lt;/code&gt;的命令行客户端。&lt;/li&gt;
&lt;li&gt;docker-containerd-shim：垫片组件。解耦&lt;code&gt;containerd&lt;/code&gt;和&lt;code&gt;runc&lt;/code&gt;，&lt;code&gt;containerd&lt;/code&gt;通过&lt;code&gt;shim&lt;/code&gt;和&lt;code&gt;runc&lt;/code&gt;通信。&lt;/li&gt;
&lt;li&gt;docker-proxy：容器代理。提供docker容器的端口映射功能。&lt;/li&gt;
&lt;li&gt;docker-runc：运行容器的命令行工具。等同于&lt;code&gt;runc&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;dockerd的进程结构&#34;&gt;dockerd的进程结构&lt;/h1&gt;
&lt;p&gt;dockerd的进程模型如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;dockerd -&amp;gt; docker-containerd ---&amp;gt; docker-containerd-shim -&amp;gt; docker-runc -&amp;gt; runc init -&amp;gt; process
                      			&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;-- &amp;gt; docker-containerd-shim -&amp;gt; docker-runc -&amp;gt; runc init -&amp;gt; process
                      			+-- &amp;gt; docker-containerd-shim -&amp;gt; docker-runc -&amp;gt; runc init -&amp;gt; process
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://xflying-blog.cdn.bcebos.com/xflying-blog%2Fcontainerd.png&#34; alt=&#34;containerd&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以通过&lt;code&gt;pstree&lt;/code&gt;查看：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ pstree -lAa &lt;span class=&#34;m&#34;&gt;13570&lt;/span&gt;
dockerd --bip&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;192.168.200.1/24 --host&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;unix:///var/run/docker.sock --config-file&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;./conf/daemon.json
  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;-docker-containe -l unix:///var/run/docker/libcontainerd/docker-containerd.sock --shim docker-containerd-shim --metrics-interval&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; --start-timeout 2m --state-dir /var/run/docker/libcontainerd/containerd --runtime docker-runc
  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;-docker-containe 05aa1aa49a6a41768d4d0faa1b96412c73298b118609a72a2ae7002ffc993f59 /var/run/docker/libcontainerd/05aa1aa49a6a41768d4d0faa1b96412c73298b118609a72a2ae7002ffc993f59 docker-runc
  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;-pause
  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;-3*&lt;span class=&#34;o&#34;&gt;[{&lt;/span&gt;pause&lt;span class=&#34;o&#34;&gt;}]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;-10*&lt;span class=&#34;o&#34;&gt;[{&lt;/span&gt;docker-containe&lt;span class=&#34;o&#34;&gt;}]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;-docker-containe 9d66703c7d900d1cba3aa48b1c0d2a04d1c5fe95383890277b3793eaaaa5be66 /var/run/docker/libcontainerd/9d66703c7d900d1cba3aa48b1c0d2a04d1c5fe95383890277b3793eaaaa5be66 docker-runc
  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;-pause
  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;-3*&lt;span class=&#34;o&#34;&gt;[{&lt;/span&gt;pause&lt;span class=&#34;o&#34;&gt;}]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;-10*&lt;span class=&#34;o&#34;&gt;[{&lt;/span&gt;docker-containe&lt;span class=&#34;o&#34;&gt;}]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h1 id=&#34;docker源码分析&#34;&gt;docker源码分析&lt;/h1&gt;
&lt;h2 id=&#34;dockerd启动containerd过程&#34;&gt;dockerd启动containerd过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;main函数启动daemon进程&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;代码：&lt;code&gt;github.com/docker/docker/cmd/dockerd/docker.go::main()&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;// ...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// 初始化参数等
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;daemonCli&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;start方法主要做两件事：启动server，准备接收client的请求；创建&lt;code&gt;containerd&lt;/code&gt;子进程。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;代码：&lt;code&gt;github.com/docker/docker/cmd/dockerd/daemon.go::start()&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cli&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;DaemonCli&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// ...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 初始化相关配置信息
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cli&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Hosts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  	&lt;span class=&#34;nx&#34;&gt;ls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;listeners&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;proto&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;serverConfig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SocketGroup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;serverConfig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;TLSConfig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	  &lt;span class=&#34;nx&#34;&gt;api&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Accept&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;protoAddrParts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ls&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;containerdRemote&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;libcontainerd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;New&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cli&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;getLibcontainerdRoot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cli&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;getPlatformRemoteOptions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;daemon&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;NewDaemon&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cli&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;registryService&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;containerdRemote&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// ...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;dockerd创建containerd子进程过程：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;代码：&lt;code&gt;github.com/docker/docker/libcontainerd/remote_linux.go::New()&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;New&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;stateDir&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;options&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;RemoteOption&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Remote&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// ...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 初始化相关配置
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 启动containerd daemon进程
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;runContainerdDaemon&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// 准备grpc连接客户端
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;apiClient&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;containerd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;NewAPIClient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// 连接管理
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;handleConnectionChange&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// 事件监控
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;startEventsMonitor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// ...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;启动containerd进程：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;代码：&lt;code&gt;github.com/docker/docker/libcontainerd/remote_linux.go::runContainerdDaemon() &lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;remote&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;runContainerdDaemon&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// ...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 参数处理等
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// containerd启动参数
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;args&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;s&#34;&gt;&amp;#34;-l&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Sprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;unix://%s&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;rpcAddr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
		&lt;span class=&#34;s&#34;&gt;&amp;#34;--shim&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;docker-containerd-shim&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
		&lt;span class=&#34;s&#34;&gt;&amp;#34;--metrics-interval=0&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
		&lt;span class=&#34;s&#34;&gt;&amp;#34;--start-timeout&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;2m&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
		&lt;span class=&#34;s&#34;&gt;&amp;#34;--state-dir&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;filepath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;stateDir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;containerdStateDir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// ...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// containerd启动命令
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;cmd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;containerdBinary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// 启动containerd进程
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;cmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// ...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;containerd启动shim的过程&#34;&gt;containerd启动shim的过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;main函数启动containerd进程&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;代码：&lt;code&gt;github.com/containerd/containerd/containerd/main.go::main()&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// ...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// 初始化相关参数
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 启动containerd
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;daemon&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;daemon函数初始化容器任务处理模块&lt;code&gt;supervisor&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;代码：&lt;code&gt;github.com/containerd/containerd/containerd/main.go::daemon()&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;daemon&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cli&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// ...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 创建容器任务server模块supervisor
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;supervisor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;New&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;state-dir&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;runtime&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;shim&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;StringSlice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;runtime-args&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Duration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;start-timeout&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;retain-count&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// ...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 准备容器任务worker
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;supervisor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;NewWorker&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;wg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 容器任务worker开始工作
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// supervisor开始处理任务
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;sv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;startServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;listenParts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;listenParts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;sv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// ...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;code&gt;supervisor.Worker&lt;/code&gt; 负责监听容器管道，启动&lt;code&gt;docker-container-shim&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;代码：&lt;code&gt;github.com/docker/containerd/supervisor/worker.go::Start()&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;worker&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// ...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;startTasks&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 新建容器
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Container&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// 将容器加入oom监听列表
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;monitor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;MonitorOOM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Container&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// 将进程加入监听列表
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;monitorProcess&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// ...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;通过&lt;code&gt;docker-container-shim&lt;/code&gt;启动容器。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;代码：&lt;code&gt;github.com/docker/containerd/runtime/container.go::Start()&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;container&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;checkpointPath&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Stdio&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// ...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 准备shim启动命令
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;cmd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;shim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bundle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;runtime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// ...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;newProcess&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// 启动shim进程
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;createCmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// ...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;shim启动runc的过程&#34;&gt;shim启动runc的过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;main函数启动shim进程，启动参数args[0]为containerID，args[1]为容器路径，args[2]为启动runtime的二进制进程&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;代码：&lt;code&gt;github.com/containerd/containerd/containerd-shim/main.go::main()&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// ...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 启动shim进程
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nf&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// ...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;shim启动函数&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;代码：&lt;code&gt;github.com/containerd/containerd/containerd-shim/main.go::start()&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// ...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// 读取进程信息和checkpoint信息等，准备I/O
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nf&#34;&gt;newProcess&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;flag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Arg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;flag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Arg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;flag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Arg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// ...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 根据检查点配置，通过runc启动容器
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// ...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;通过runc启动容器&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;代码：&lt;code&gt;github.com/containerd/containerd/containerd-shim/process.go::create()&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// ...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 准备容器相关配置，准备runc启动参数
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// runc启动命令
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;cmd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;runtime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// 执行命令
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;cmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// ...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>使用Ngrok搭建内网穿透环境</title>
      <link>http://flyingfang.github.io/post/ngrok/</link>
      <pubDate>Thu, 05 Sep 2019 14:43:50 +0800</pubDate>
      
      <guid>http://flyingfang.github.io/post/ngrok/</guid>
      
        <description>&lt;h1 id=&#34;ngrok简介&#34;&gt;ngrok简介&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://ngrok.com/&#34;&gt;Ngrok&lt;/a&gt;通过代理的方式实现两个不同的网络之间的通信。ngrok支持http隧道、tls隧道和tcp隧道，满足常用的隧道协议需求。并且它是一个跨平台产品，macOS、Linux、Windows都可使用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://luozm.github.io/images/ngrok/ngrok.png&#34; alt=&#34;ngrok&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;准备&#34;&gt;准备&lt;/h1&gt;
&lt;p&gt;一台VPS：AWS免费申请的一个1核 1G的Ubuntu服务器。&lt;/p&gt;
&lt;p&gt;一个域名：自己有一个域名，新增了一条A记录 *.tun 指到了上述VPS的公网IP上。&lt;/p&gt;
&lt;h1 id=&#34;搭建&#34;&gt;搭建&lt;/h1&gt;
&lt;h2 id=&#34;server端&#34;&gt;Server端&lt;/h2&gt;
&lt;p&gt;1.准备环境&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ sudo apt-get update
$ sudo apt-get install build-essential golang mercurial git
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;2.源码编译ngrok&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ~ &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git clone https://09.git ngrok
$ &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ~/ngrok &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; mkdir cert
$ &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ~/ngrok/cert

$ &lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;NGROK_DOMAIN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;lt;你的域名 eg: &lt;span class=&#34;s2&#34;&gt;&amp;#34;tun.xxx.com&amp;#34;&lt;/span&gt;&amp;gt;
$ openssl genrsa -out rootCA.key &lt;span class=&#34;m&#34;&gt;2048&lt;/span&gt;
$ openssl req -x509 -new -nodes -key rootCA.key -subj &lt;span class=&#34;s2&#34;&gt;&amp;#34;/CN=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$NGROK_DOMAIN&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; -days &lt;span class=&#34;m&#34;&gt;5000&lt;/span&gt; -out rootCA.pem
$ openssl genrsa -out server.key &lt;span class=&#34;m&#34;&gt;2048&lt;/span&gt;
$ openssl req -new -key server.key -subj &lt;span class=&#34;s2&#34;&gt;&amp;#34;/CN=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$NGROK_DOMAIN&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; -out server.csr
$ openssl x509 -req -in server.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -days &lt;span class=&#34;m&#34;&gt;10000&lt;/span&gt; -out server.crt

$ &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ~/ngrok
$ cp cert/rootCA.pem assets/client/tls/ngrokroot.crt
$ cp cert/server.crt assets/server/tls/snakeoil.crt
$ cp cert/server.key assets/server/tls/snakeoil.key

$ sudo make release-server release-client
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;3.启动&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ ./bin/ngrokd -tlsKey&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;cert/server.key -tlsCrt&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;cert/server.crt -domain&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;lt;你的域名 eg: &lt;span class=&#34;s2&#34;&gt;&amp;#34;tun.xxx.com&amp;#34;&lt;/span&gt;&amp;gt; -httpAddr&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;:8001&amp;#34;&lt;/span&gt; -httpsAddr&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;:8002&amp;#34;&lt;/span&gt; -tunnelAddr&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;:4443&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;4.注意设置VPS安全组&lt;/p&gt;
&lt;p&gt;8001、8002、4443为ngrok必要端口，其余为自定义映射的端口&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xflying-blog.cdn.bcebos.com/security.png&#34; alt=&#34;安全组&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;client端&#34;&gt;Client端&lt;/h2&gt;
&lt;h3 id=&#34;macos&#34;&gt;macOS&lt;/h3&gt;
&lt;p&gt;1.在ubuntu上交叉编译macOS的ngrok客户端&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;nv&#34;&gt;CGO_ENABLED&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;GOOS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;darwin &lt;span class=&#34;nv&#34;&gt;GOARCH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;amd64 make release-client
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;2.配置ngrok.yml&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;k&#34;&gt;server_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;你的域名 eg: tun.xxx.com&amp;gt;:4443&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;trust_host_root_certs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;tunnels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ssh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;subdomain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;ssh&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;remote_port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2222&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;proto&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;tcp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;22&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;3.启动客户端&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ ./bin/ngrok -config&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;ngrok.cfg start-all
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;制作为开机启动项（可选）：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ touch ~/Library/LaunchAgents/com.flyingfang.ngrok.plist
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;内容如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;&amp;lt;!DOCTYPE plist PUBLIC &amp;#34;-//Apple//DTD PLIST 1.0//EN&amp;#34; &amp;#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;#34;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;plist&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;version=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;1.0&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;KeepAlive&lt;span class=&#34;nt&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;true/&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;Label&lt;span class=&#34;nt&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;com.xflying.ngrok&lt;span class=&#34;nt&#34;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;ProgramArguments&lt;span class=&#34;nt&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;array&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;/Users/xflying/go/src/github.com/inconshreveable/ngrok/bin/ngrok&lt;span class=&#34;nt&#34;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;-config=/Users/xflying/go/src/github.com/inconshreveable/ngrok/ngrok.cfg&lt;span class=&#34;nt&#34;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;start-all&lt;span class=&#34;nt&#34;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;/array&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;RunAtLoad&lt;span class=&#34;nt&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;true/&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/plist&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;装载并启动：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ launchctl load -w  ~/Library/LaunchAgents/com.xflying.ngrok.plist
$ launchctl start com.xflying.ngrok
$ launchctl list &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep &lt;span class=&#34;s2&#34;&gt;&amp;#34;ngrok&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;linux&#34;&gt;Linux&lt;/h3&gt;
&lt;p&gt;1.配置ngrok.yml&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;k&#34;&gt;server_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;你的域名 eg: tun.xxx.com&amp;gt;:4443&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;trust_host_root_certs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;tunnels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ssh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;remote_port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3222&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;proto&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;tcp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;22&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;desktop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;remote_port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;35900&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;proto&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;tcp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5900&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;2.启动客户端&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$./ngrok -log&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;stdout -config&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;ngrok.yml  start ssh desktop
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;3.使用supervisord管理ngrok （可选）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[program:ngrok]
directory=/home/xflying/software/ngrok
command=/home/xflying/software/ngrok/ngrok -log=stdout -config=ngrok.yml start ssh desktop
autostart=true
autorestart=true
startretries=10
redirect_stderr=true
stdout_logfile=/home/xflying/software/ngrok/ngrok.log
environment=ASPNETCORE_ENVIRONMENT=&amp;#34;Development&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>Cgroup泄漏</title>
      <link>http://flyingfang.github.io/post/cgroup-leak/</link>
      <pubDate>Tue, 23 Jul 2019 15:39:48 +0800</pubDate>
      
      <guid>http://flyingfang.github.io/post/cgroup-leak/</guid>
      
        <description>&lt;h2 id=&#34;现象&#34;&gt;现象&lt;/h2&gt;
&lt;p&gt;docker新建容器时：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# docker run --name=hello -d hello-world&lt;/span&gt;
d3a26424f27a5703e6207e9000358a3048f865438f258e4db1d3f3a607f7f858
docker: Error response from daemon: invalid header field value &lt;span class=&#34;s2&#34;&gt;&amp;#34;oci runtime error: container_linux.go:247: starting container process caused \&amp;#34;process_linux.go:258: applying cgroup configuration for process caused \\\&amp;#34;mkdir /cgroup/memory/docker/d3a26424f27a5703e6207e9000358a3048f865438f258e4db1d3f3a607f7f858: no space left on device\\\&amp;#34;\&amp;#34;\n&amp;#34;&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;kubernetes新建Pod时：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;E0723 14:10:48.255404    &lt;span class=&#34;m&#34;&gt;2460&lt;/span&gt; pod_workers.go:186&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Error syncing pod eda017cf-acef-11e9-aa46-6c92bf991e1c &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;hello-56cd858d87-jqssj_cfc(eda017cf-acef-11e9-aa46-6c92bf991e1c)&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, skipping: failed to ensure that the pod: eda017cf-acef-11e9-aa46-6c92bf991e1c cgroups exist and are correctly applied: failed to create container &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;kubepods besteffort podeda017cf-acef-11e9-aa46-6c92bf991e1c&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; : mkdir /cgroup/memory/kubepods/besteffort/podeda017cf-acef-11e9-aa46-6c92bf991e1c: no space left on device
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;cgroups：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# cat /proc/cgroups&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#subsys_name	hierarchy	num_cgroups	enabled&lt;/span&gt;
cpuset	1	720	&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
cpu	2	78	&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
cpuacct	3	54	&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
memory	4	57	&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
devices	5	719	&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
freezer	6	55	&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
net_cls	7	51	&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
blkio	8	54	&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
perf_event	16	7	&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
hugetlb	29	9	&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
tos_cgroup	19	5	&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
tcp_throt	18	6	&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
tasks	17	6	&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;环境&#34;&gt;环境&lt;/h2&gt;
&lt;p&gt;kubernetes版本：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# kubectl version&lt;/span&gt;
Client Version: version.Info&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;Major:&lt;span class=&#34;s2&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;, Minor:&lt;span class=&#34;s2&#34;&gt;&amp;#34;13&amp;#34;&lt;/span&gt;, GitVersion:&lt;span class=&#34;s2&#34;&gt;&amp;#34;v1.13.4&amp;#34;&lt;/span&gt;, GitCommit:&lt;span class=&#34;s2&#34;&gt;&amp;#34;c27b913fddd1a6c480c229191a087698aa92f0b1&amp;#34;&lt;/span&gt;, GitTreeState:&lt;span class=&#34;s2&#34;&gt;&amp;#34;clean&amp;#34;&lt;/span&gt;, BuildDate:&lt;span class=&#34;s2&#34;&gt;&amp;#34;2019-02-28T13:37:52Z&amp;#34;&lt;/span&gt;, GoVersion:&lt;span class=&#34;s2&#34;&gt;&amp;#34;go1.11.5&amp;#34;&lt;/span&gt;, Compiler:&lt;span class=&#34;s2&#34;&gt;&amp;#34;gc&amp;#34;&lt;/span&gt;, Platform:&lt;span class=&#34;s2&#34;&gt;&amp;#34;linux/amd64&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
Server Version: version.Info&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;Major:&lt;span class=&#34;s2&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;, Minor:&lt;span class=&#34;s2&#34;&gt;&amp;#34;14&amp;#34;&lt;/span&gt;, GitVersion:&lt;span class=&#34;s2&#34;&gt;&amp;#34;v1.14.3&amp;#34;&lt;/span&gt;, GitCommit:&lt;span class=&#34;s2&#34;&gt;&amp;#34;5e53fd6bc17c0dec8434817e69b04a25d8ae0ff0&amp;#34;&lt;/span&gt;, GitTreeState:&lt;span class=&#34;s2&#34;&gt;&amp;#34;clean&amp;#34;&lt;/span&gt;, BuildDate:&lt;span class=&#34;s2&#34;&gt;&amp;#34;2019-06-06T01:36:19Z&amp;#34;&lt;/span&gt;, GoVersion:&lt;span class=&#34;s2&#34;&gt;&amp;#34;go1.12.5&amp;#34;&lt;/span&gt;, Compiler:&lt;span class=&#34;s2&#34;&gt;&amp;#34;gc&amp;#34;&lt;/span&gt;, Platform:&lt;span class=&#34;s2&#34;&gt;&amp;#34;linux/amd64&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# ./kubelet --version&lt;/span&gt;
Kubernetes v1.12.5
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;docker版本：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# docker info&lt;/span&gt;
Server Version: 1.12.5
Cgroup Driver: cgroupfs
Runtimes: runc
Security Options: seccomp
Kernel Version: 3.10.0_3-0-0-20
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;内核版本：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# uname -r&lt;/span&gt;
3.10.0_3-0-0-20
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;排查过程及问题原因&#34;&gt;排查过程及问题原因&lt;/h2&gt;
&lt;p&gt;根据搜索相关资料的结果，怀疑此问题与kmem accounting功能下cgroup泄漏问题有关。runc在commit &lt;a href=&#34;https://github.com/opencontainers/runc/pull/1350/commits/fe898e7862f945fa3632580139602c627dcb9be0&#34;&gt;fe898e7&lt;/a&gt; (2017-2-25, PR #1350)以后的runc版本中，默认开启了kmem accounting。&lt;/p&gt;
&lt;p&gt;1.判断cgroup kernel memory 是否激活。查看一个pod的 &lt;strong&gt;memory.kmem.slabinfo&lt;/strong&gt; 文件。&lt;/p&gt;
&lt;p&gt;开启状态：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# cat /sys/fs/cgroup/memory/kubepods/besteffort/pod478a61ae-a20a-11e9-bba3-6c92bf991e1c/memory.kmem.slabinfo&lt;/span&gt;
slabinfo - version: 2.1
&lt;span class=&#34;c1&#34;&gt;# name            &amp;lt;active_objs&amp;gt; &amp;lt;num_objs&amp;gt; &amp;lt;objsize&amp;gt; &amp;lt;objperslab&amp;gt; &amp;lt;pagesperslab&amp;gt; : tunables &amp;lt;limit&amp;gt; &amp;lt;batchcount&amp;gt; &amp;lt;sharedfactor&amp;gt; : slabdata &amp;lt;active_slabs&amp;gt; &amp;lt;num_slabs&amp;gt; &amp;lt;sharedavail&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;关闭状态：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# cat memory.kmem.slabinfo&lt;/span&gt;
cat: memory.kmem.slabinfo: Input/output error
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;2.检查docker/kubelet依赖的runc版本。&lt;/p&gt;
&lt;p&gt;目前线上用的docker版本为1.12.5，不存在相关问题。&lt;/p&gt;
&lt;p&gt;而kubelet的版本为v1.12.5。依赖的runc代码为 &lt;a href=&#34;https://github.com/kubernetes/kubernetes/blob/5f799a487b70aea5e298e5f5f1e3bac904b54ef6/vendor/github.com/opencontainers/runc/libcontainer/cgroups/fs/memory.go#L50&#34;&gt;https://github.com/kubernetes/kubernetes/blob/5f799a487b70aea5e298e5f5f1e3bac904b54ef6/vendor/github.com/opencontainers/runc/libcontainer/cgroups/fs/memory.go#L50&lt;/a&gt;，的确是修改后的版本，默认开启了kmem accounting：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;memoryAssigned&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Stat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;IsNotExist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;MkdirAll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mo&#34;&gt;0755&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
				&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;
			&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
			&lt;span class=&#34;c1&#34;&gt;// Only enable kernel memory accouting when this cgroup
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;			&lt;span class=&#34;c1&#34;&gt;// is created by libcontainer, otherwise we might get
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;			&lt;span class=&#34;c1&#34;&gt;// error when people use `cgroupsPath` to join an existed
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;			&lt;span class=&#34;c1&#34;&gt;// cgroup whose kernel memory is not initialized.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;			&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;EnableKernelMemoryAccounting&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
				&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;
			&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;3.cgroup kernel memory 激活后可以关闭吗？&lt;/p&gt;
&lt;p&gt;在激活 cgroup kernel memory 后，是不能关闭的，只能通过设置 -1 关闭限制，但还是会继续计数。故需要重启机器。&lt;/p&gt;
&lt;h2 id=&#34;解决方案&#34;&gt;解决方案&lt;/h2&gt;
&lt;p&gt;1.升级内核版本至4.x以上。&lt;/p&gt;
&lt;p&gt;2.重新编译kubelet。&lt;/p&gt;
&lt;p&gt;v 1.14之后的版本，在编译 kubelet 的时候加上 &lt;a href=&#34;https://link.zhihu.com/?target=https%3A//github.com/kubernetes/kubernetes/blob/release-1.14/vendor/github.com/opencontainers/runc/libcontainer/cgroups/fs/kmem_disabled.go%23L1&#34;&gt;Build Tags&lt;/a&gt; 可以关闭 kmem account：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# KUBE_GIT_VERSION=v1.14.1 ./build/run.sh make kubelet GOFLAGS=&amp;#34;-tags=nokmem&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;v.1.14以前的版本，则需要修改相关代码&lt;a href=&#34;https://github.com/kubernetes/kubernetes/blob/release-1.12/vendor/github.com/opencontainers/runc/libcontainer/cgroups/fs/memory.go#L70-L106&#34;&gt;code&lt;/a&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;EnableKernelMemoryAccounting&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;setKernelMemory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;kernelMemoryLimit&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;3.可以升级 docker-ce 到 18.09.1 以上，此版本 docker 已经默认关闭kmem accounting。&lt;/p&gt;
&lt;p&gt;3.重启宿主机。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;h3 id=&#34;文章&#34;&gt;文章&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://www.linuxfly.org/kubernetes-19-conflict-with-centos7/&#34;&gt;kubernetes 1.9 与 CentOS 7.3 内核兼容问题&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://pingcap.com/blog/try-to-fix-two-linux-kernel-bugs-while-testing-tidb-operator-in-k8s/&#34;&gt;Try to Fix Two Linux Kernel Bugs While Testing TiDB Operator in K8s by.PingCAP&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://tencentcloudcontainerteam.github.io/2018/12/29/cgroup-leaking/&#34;&gt;Cgroup泄漏&amp;ndash;潜藏在你的集群中&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;issue&#34;&gt;issue&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kubernetes/kubernetes/issues/61937&#34;&gt;https://github.com/kubernetes/kubernetes/issues/61937&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/opencontainers/runc/issues/1725&#34;&gt;https://github.com/opencontainers/runc/issues/1725&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://support.mesosphere.com/s/article/Critical-Issue-KMEM-MSPH-2018-0006&#34;&gt;https://support.mesosphere.com/s/article/Critical-Issue-KMEM-MSPH-2018-0006&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>Etcd Operator使用笔记</title>
      <link>http://flyingfang.github.io/post/etcd-operator/</link>
      <pubDate>Tue, 30 Apr 2019 20:24:47 +0800</pubDate>
      
      <guid>http://flyingfang.github.io/post/etcd-operator/</guid>
      
        <description>&lt;h1 id=&#34;etcd-operator&#34;&gt;etcd-operator&lt;/h1&gt;
&lt;h2 id=&#34;能力&#34;&gt;能力&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;创建/销毁：用户只需最小限度地指定集群的大小，而不是为每个 etcd 成员指定繁琐的设置。&lt;/li&gt;
&lt;li&gt;调整大小：用户只需要按规范修改大小，etcd Operator 将负责部署，销毁或重新配置集群成员，例如，从 3 到 5，或从 5 到 3。&lt;/li&gt;
&lt;li&gt;备份：etcd Operator 自动并透明地执行备份。用户只需指定备份策略，例如每 30 分钟备份一次，并保留最后 3 次备份。&lt;/li&gt;
&lt;li&gt;升级：在不停机地情况下升级 etcd 是一项重要而艰巨地任务。使用 etcd Operator 不仅可以简化操作，还可以避免常见地升级缺陷和错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;创建销毁&#34;&gt;创建/销毁&lt;/h2&gt;
&lt;h3 id=&#34;安装&#34;&gt;安装&lt;/h3&gt;
&lt;p&gt;1.设置RBAC规则，因为etcd operator需要访问Kubernetes 的 Apiserver 来创建对象。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ example/rbac/create_role.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;上述脚本为 Etcd Operator 定义了如下所示的权限：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对 Pod、Service、PVC、Deployment、Secret 等 API 对象，有所有权限；&lt;/li&gt;
&lt;li&gt;对 CRD 对象，有所有权限；&lt;/li&gt;
&lt;li&gt;对属于 etcd.database.coreos.com 这个 API Group 的 CR（Custom Resource）对象，有所有权限。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;Name:         etcd-operator
Labels:       &amp;lt;none&amp;gt;
Annotations:  &amp;lt;none&amp;gt;
PolicyRule:
  Resources                                       Non-Resource URLs  Resource Names  Verbs
  ---------                                       -----------------  --------------  -----
  endpoints                                       &lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;                 &lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;              &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;*&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
  events                                          &lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;                 &lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;              &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;*&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
  persistentvolumeclaims                          &lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;                 &lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;              &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;*&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
  pods                                            &lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;                 &lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;              &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;*&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
  services                                        &lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;                 &lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;              &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;*&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
  customresourcedefinitions.apiextensions.k8s.io  &lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;                 &lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;              &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;*&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
  deployments.apps                                &lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;                 &lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;              &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;*&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
  etcdbackups.etcd.database.coreos.com            &lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;                 &lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;              &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;*&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
  etcdclusters.etcd.database.coreos.com           &lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;                 &lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;              &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;*&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
  etcdrestores.etcd.database.coreos.com           &lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;                 &lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;              &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;*&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
  secrets                                         &lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;                 &lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;              &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;get&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;2.安装etcd-operator deployments。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ kubectl create -f example/deployment.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;etcd-operator会创建一个CRD资源(etcdclusters.etcd.database.coreos.com)。之后用户可以创建一个EtcdCluster类型的资源。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;kubectl describe crd etcdclusters.etcd.database.coreos.com
Name:         etcdclusters.etcd.database.coreos.com
Kind:         CustomResourceDefinition
...
  Group:   etcd.database.coreos.com
  Names:
    Kind:       EtcdCluster
    List Kind:  EtcdClusterList
    Plural:     etcdclusters
    Short Names:
      etcd
    Singular:  etcdcluster
  Scope:       Namespaced
  Version:     v1beta2
  Versions:
    Name:     v1beta2
    Served:   &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;
    Storage:  &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;3.安装etcd-cluster deployments。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ kubectl apply -f example/example-etcd-cluster.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;以下是 &lt;code&gt;example/example-etcd-cluster.yaml&lt;/code&gt; 的具体内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;k&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;etcd.database.coreos.com/v1beta2&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;EtcdCluster&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;example-etcd-cluster&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;## Adding this annotation make this cluster managed by clusterwide operators&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;## namespaced operators ignore it&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# annotations:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#   etcd.database.coreos.com/scope: clusterwide&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;3.2.13&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这时会创建一个版本为3.2.13的3节点etcd集群。&lt;/p&gt;
&lt;p&gt;4.总结一下：一个由operator控制的etcd集群包括以下资源：（可选，创建一个serviceAccount）&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;资源&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ClusterRole&lt;/td&gt;
&lt;td&gt;etcd-operator&lt;/td&gt;
&lt;td&gt;etcd operator规则&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ClusterRoleBinding&lt;/td&gt;
&lt;td&gt;etcd-operator&lt;/td&gt;
&lt;td&gt;绑定serviceAccount和clusterRole&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Deployment&lt;/td&gt;
&lt;td&gt;etcd-operator&lt;/td&gt;
&lt;td&gt;etcd集群operator&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CustomResourceDefinition&lt;/td&gt;
&lt;td&gt;etcdclusters.etcd.database.coreos.com&lt;/td&gt;
&lt;td&gt;由etcd-operator创建的EtcdCluster资源&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EtcdCluster&lt;/td&gt;
&lt;td&gt;example-etcd-cluster&lt;/td&gt;
&lt;td&gt;etcd集群资源&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;卸载&#34;&gt;卸载&lt;/h3&gt;
&lt;p&gt;官方建议在uninstall之前，先删除相关的用户自定义（CR）资源。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;kubectl delete -f example/deployment.yaml
kubectl delete endpoints etcd-operator
kubectl delete crd etcdclusters.etcd.database.coreos.com
kubectl delete clusterrole etcd-operator
kubectl delete clusterrolebinding etcd-operator
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;容量控制&#34;&gt;容量控制&lt;/h2&gt;
&lt;p&gt;1.扩容：修改cluster deployment yaml文件，将size从3改至5。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ kubectl apply -f example/example-etcd-cluster.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;apiVersion: &lt;span class=&#34;s2&#34;&gt;&amp;#34;etcd.database.coreos.com/v1beta2&amp;#34;&lt;/span&gt;
kind: &lt;span class=&#34;s2&#34;&gt;&amp;#34;EtcdCluster&amp;#34;&lt;/span&gt;
metadata:
  name: &lt;span class=&#34;s2&#34;&gt;&amp;#34;example-etcd-cluster&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;## Adding this annotation make this cluster managed by clusterwide operators&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;## namespaced operators ignore it&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# annotations:&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;#   etcd.database.coreos.com/scope: clusterwide&lt;/span&gt;
spec:
  size: &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;
  version: &lt;span class=&#34;s2&#34;&gt;&amp;#34;3.2.13&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;2.缩容：同理，修改size。&lt;/p&gt;
&lt;h2 id=&#34;故障恢复&#34;&gt;故障恢复&lt;/h2&gt;
&lt;p&gt;Case1: etcd cluster单点故障：由etcd-operator维护故障恢复，无需用户关心。&lt;/p&gt;
&lt;p&gt;Case2: etcd-operator故障：由于etcd-operator为deployment资源，会自动拉起新的pod。不会影响etcd集群。&lt;/p&gt;
&lt;p&gt;Case3: etcd-operator Deployment被删除：会重新接管EtcdCluster资源，按照配置维护集群状态。不会影响etcd集群。&lt;/p&gt;
&lt;h2 id=&#34;备份恢复&#34;&gt;备份恢复&lt;/h2&gt;
&lt;p&gt;备份模块：etcd backup operator&lt;/p&gt;
&lt;p&gt;恢复模块：etcd restore operator&lt;/p&gt;
&lt;h2 id=&#34;helm-charts&#34;&gt;Helm Charts&lt;/h2&gt;
&lt;p&gt;etcd-operator的官方Helm charts提供整套方案，包括etcd的集群模块，etcd的备份模块及etcd的恢复模块。总共包括以下资源：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;资源&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ClusterRole&lt;/td&gt;
&lt;td&gt;etcd-operator-etcd-operator-etcd-operator&lt;/td&gt;
&lt;td&gt;etcd operator规则&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ServiceAccount&lt;/td&gt;
&lt;td&gt;etcd-operator-etcd-operator-etcd-operator&lt;/td&gt;
&lt;td&gt;etcd集群operator&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ClusterRoleBinding&lt;/td&gt;
&lt;td&gt;etcd-operator-etcd-operator-etcd-operator&lt;/td&gt;
&lt;td&gt;etcd集群operator&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CustomResourceDefinition&lt;/td&gt;
&lt;td&gt;etcdclusters.etcd.database.coreos.com&lt;/td&gt;
&lt;td&gt;etcd集群operator&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Deployment&lt;/td&gt;
&lt;td&gt;etcd-operator-etcd-operator-etcd-operator&lt;/td&gt;
&lt;td&gt;etcd集群operator&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ServiceAccount&lt;/td&gt;
&lt;td&gt;etcd-operator-etcd-operator-etcd-backup-operator&lt;/td&gt;
&lt;td&gt;etcd备份operator&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ClusterRoleBinding&lt;/td&gt;
&lt;td&gt;etcd-operator-etcd-operator-etcd-backup-operator&lt;/td&gt;
&lt;td&gt;etcd备份operator&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CustomResourceDefinition&lt;/td&gt;
&lt;td&gt;etcdbackups.etcd.database.coreos.com&lt;/td&gt;
&lt;td&gt;etcd备份operator&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Deployment&lt;/td&gt;
&lt;td&gt;etcd-operator-etcd-operator-etcd-backup-operator&lt;/td&gt;
&lt;td&gt;etcd备份operator&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ServiceAccount&lt;/td&gt;
&lt;td&gt;etcd-operator-etcd-operator-etcd-restore-operator&lt;/td&gt;
&lt;td&gt;etcd恢复operator&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ClusterRoleBinding&lt;/td&gt;
&lt;td&gt;etcd-operator-etcd-operator-etcd-restore-operator&lt;/td&gt;
&lt;td&gt;etcd恢复operator&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CustomResourceDefinition&lt;/td&gt;
&lt;td&gt;etcdrestores.etcd.database.coreos.com&lt;/td&gt;
&lt;td&gt;etcd恢复operator&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Deployment&lt;/td&gt;
&lt;td&gt;etcd-operator-etcd-operator-etcd-restore-operator&lt;/td&gt;
&lt;td&gt;etcd恢复operator&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Service&lt;/td&gt;
&lt;td&gt;etcd-restore-operator&lt;/td&gt;
&lt;td&gt;etcd恢复operator&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;参考资料&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://coreos.com/blog/introducing-operators.html&#34;&gt;coreOS关于operator的介绍&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://coreos.com/blog/introducing-the-etcd-operator.html&#34;&gt;coreOS关于etcd-operator的介绍&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/coreos/etcd-operator&#34;&gt;github仓库 etcd-operator&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/helm/charts/tree/master/stable/etcd-operator&#34;&gt;helm charts etcd-operator&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://coreos.com/operators/&#34;&gt;Operator FrameWork By.coreOS&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>初探FaaS（一）——Serverless架构</title>
      <link>http://flyingfang.github.io/post/seek-faas-01/</link>
      <pubDate>Sun, 23 Dec 2018 21:38:13 +0800</pubDate>
      
      <guid>http://flyingfang.github.io/post/seek-faas-01/</guid>
      
        <description>&lt;h2 id=&#34;serverless是什么&#34;&gt;Serverless是什么&lt;/h2&gt;
&lt;p&gt;AWS的官方介绍如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在不考虑服务器的情况下构建并运行应用程序。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我的理解是Serverless就是云服务提供商提供给用户的更完美封装的一个产品。&lt;/p&gt;
&lt;p&gt;Serverless无服务并不意味着没有服务器，而是把服务器及运行环境的部署运维交给了第三方服务商去做，而开发者只需关心自己的业务逻辑。&lt;/p&gt;
&lt;h2 id=&#34;serverless分类&#34;&gt;Serverless分类&lt;/h2&gt;
&lt;p&gt;Serverless大体分为BaaS和FaaS两类：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;BaaS（Backend-as-a-Service）：云服务厂商将后端服务包装抽象成为独立的service提供给用户。比如AWS的数据库服务BynamoDB、消息队列服务SQS等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;FaaS（Function-as-a-Service）：云服务厂商基于容器技术提供基于事件的无状态计算产品，拥有即用即走的特点。比如AWS Lambda，阿里云的Compute Function等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;serverless特性&#34;&gt;Serverless特性&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;无需自行管理服务器和服务运行环境，达到即用即走。&lt;/li&gt;
&lt;li&gt;无状态。正是由于**1 **的特性，也要求我们的程序是无状态的。即，不将信息存储于本地，保证多个实例对同一个请求响应的结果完全一致。&lt;/li&gt;
&lt;li&gt;函数是一等公民，不受语言和运行平台限制。各个函数模块可以使用不同的语言，甚至AWS Lambda在2018年支持自己提供Runtime以扩展平台尚未支持的语言。&lt;/li&gt;
&lt;li&gt;代码的部署流程简化。由于无需自行维护基础服务，仅需打包上传代码即可。&lt;/li&gt;
&lt;li&gt;无需担心弹性扩容。服务的扩缩容都交由云服务商处理，不再有用户考虑。&lt;/li&gt;
&lt;li&gt;事件驱动。支持多种事件源，比如和API Gateway配合可以开发Restful API，和Cloud Watch配合可以做定时脚本，还可以由数据库DynamoDB、消息队列SQS等触发。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;serverless优点&#34;&gt;Serverless优点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;降低启动成本。创业公司无需一上来就部署基础设施，也无需开发一些基础服务，如短信、邮件等。&lt;/li&gt;
&lt;li&gt;降低运维成本。不需要负责部署和运维实体服务器。&lt;/li&gt;
&lt;li&gt;降低开发成本。简化开发流程和部署上线流程，可以将更多精力投入在业务逻辑中。&lt;/li&gt;
&lt;li&gt;降低扩容成本。有云服务商负责弹性扩容，达到成本的最优化。用户不再需要操心。&lt;/li&gt;
&lt;li&gt;简化部署流程。不再需要自行维护运行环境，直接由编译打包的方式部署。&lt;/li&gt;
&lt;li&gt;提高资源利用。减少冗余服务器空跑的现象。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;serverless缺点&#34;&gt;Serverless缺点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;冷启动问题。一般FaaS产品会运行于容器中，首次访问或长时间后再访问会有一个重新分配资源和启动容器资源的时间消耗。&lt;/li&gt;
&lt;li&gt;强依赖云服务提供商。如果使用了AWS的Lambda产品很难平滑平移到其他云服务产品上。如果同时使用Lambda调用了该云服务商的其他产品，则更加增加迁移成本。&lt;/li&gt;
&lt;li&gt;缺乏调试和开发工具。最开始不提供本地的调试解决方案，需要一遍遍打包上传来进行调试。&lt;/li&gt;
&lt;li&gt;语言版本落后。一般各云服务提供商会支持特定的语言及版本，一般比较老旧。2018年之后，AWS Lambda支持自行定义Runtime，来支持用户自定义运行环境。&lt;/li&gt;
&lt;li&gt;性能问题。缺乏连接池的概念，每一次FaaS请求都需要重新建立连接，比如数据库连接，这样在大并发下会产生性能问题。&lt;/li&gt;
&lt;li&gt;安全问题。多个用户的资源可能会放在同一个云主机上，资源的分配调度会影响服务的性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;serverless适用场景&#34;&gt;Serverless适用场景&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;通用基础服务，如邮件、短信、推送等。&lt;/li&gt;
&lt;li&gt;工具类型的服务，如认证、查天气，生成二维码等。&lt;/li&gt;
&lt;li&gt;定时任务。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;hellip; 发挥脑洞吧。&lt;/p&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://martinfowler.com/articles/serverless.html&#34;&gt;《Serverless Architectures》 By Martin Fowler&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://serverless.ink&#34;&gt;《Serverless应用开发指南》 By Phodal&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>白话TCP协议的三次握手和四次分手</title>
      <link>http://flyingfang.github.io/post/tcp-hello-bye/</link>
      <pubDate>Wed, 31 Oct 2018 22:38:40 +0800</pubDate>
      
      <guid>http://flyingfang.github.io/post/tcp-hello-bye/</guid>
      
        <description>&lt;h2 id=&#34;什么是三次握手&#34;&gt;什么是三次握手？&lt;/h2&gt;
&lt;p&gt;三次握手的实质就是两次请求+两次确认，从而保证了双工通信。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第一次握手&lt;/strong&gt;：客户端向服务端发送连接请求（SYN）报文段，发送请求后，客户端会进入连接发送等待回复（SYN_SENT）阶段。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第二次握手&lt;/strong&gt;：服务端向客户端确认连接请求（ACK）报文段，并向客户端也发送一个连接请求（SYN）报文段，此时服务端会进入接收到连接请求（SYN_RCVD）阶段。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第三次握手&lt;/strong&gt;：客户端向服务端发送确认连接（ACK）的报文段，此包发完客户端和服务端连接成功，进入数据连接完成阶段（ESTABLISHED）。&lt;/p&gt;
&lt;h2 id=&#34;什么是四次挥手&#34;&gt;什么是四次挥手？&lt;/h2&gt;
&lt;p&gt;四次挥手的实质也是两次请求+两次确认。断开连接请求可以是客户端发起的，也可以是服务端发起的，为了方便，以下统一称主动断开的一方为客户端，被动断开的一方为服务端。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第一次挥手&lt;/strong&gt;：客户端向服务端发送断开请求（FIN）报文段，然后客户端进入一个等待断开（FIN_WAIT_1）的阶段。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第二次挥手&lt;/strong&gt;：服务端接收到客户端的断开请求，会进入到等待关闭（CLOSE_WAIT）阶段，并且向客户端发送一个确认（ACK）报文段，告知客户端确认断开。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第三次挥手&lt;/strong&gt;：客户端接收到服务端的确认报文段后，进入等待断开的第二阶段（FIN_WAIT_2）。服务端在处理完相关事项之后，发送一个断开连接的报文段，服务端进入最后确认（LAST_ACK）阶段。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第四次挥手&lt;/strong&gt;：客户端收到服务端的断开连接请求后，向服务端发回一个确认报文段，并进入最后等待（TIME_WAIT）阶段。服务端接收到确认报文后，直接关闭连接，而服务端会等待一个2MSL时间关闭连接。&lt;/p&gt;
&lt;h2 id=&#34;为什么需要三次握手&#34;&gt;为什么需要三次握手？&lt;/h2&gt;
&lt;p&gt;如果只有两次握手，会无法保证双工通信，并且对服务端也是一种资源浪费。客户端因为延迟等原因发送重试连接请求报文段，服务端并不会拥有辨别的能力，会全部确认连接。而此时，只要服务端发出确认，就认为本次连接成功。就会造成客户端认为连接未建立，而服务端认为连接建立的现象，从而产生资源的浪费。而此情况出现在三次握手机制下的时候，服务端由于不会收到客户端的确认报文，就不会跟客户端建立连接。&lt;/p&gt;
&lt;p&gt;三次握手其实是本质就是双向握手+双向确认，只不过其中一个环节将一次握手和确认合并了，所以是三次。三次握手是可以保证连接可靠的最小过程，所以四次、五次都是没有必要的。&lt;/p&gt;
&lt;p&gt;这也是一种对&lt;a href=&#34;https://www.8btc.com/article/70370&#34;&gt;拜占庭将军问题&lt;/a&gt;的折中解决方案。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;官方解释&lt;/strong&gt;：“为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误”——《计算机网络》&lt;/p&gt;
&lt;h2 id=&#34;为什么需要四次分手&#34;&gt;为什么需要四次分手？&lt;/h2&gt;
&lt;p&gt;为什么握手只需要三次，而分手却需要四次呢？很好理解，就像恋爱中的曲终人散一样，一方准备好了一切提出分手，另一方在同意分手的情况下，总还需要收拾收拾打包走人，再达到最终的分手状态。&lt;/p&gt;
&lt;p&gt;而回到TCP协议中来说，因为TCP是面向字节流的协议，当服务端确认了客户端的断开请求的时候，此时表示客户端已经停止发送请求，但是并不表示服务端已经全部接收客户端之前发送的数据报文段。所以，服务端需要等待接收到所有的数据之后，再向客户端发送断开请求，以告知客户端可以真正的断开了。&lt;/p&gt;
&lt;h2 id=&#34;一个图解&#34;&gt;一个图解&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;http://xflying-blog.cdn.bcebos.com/tcp.jpeg&#34; alt=&#34;TCP的整个过程&#34;&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>[读书笔记] - 《软技能》</title>
      <link>http://flyingfang.github.io/post/soft-skills/</link>
      <pubDate>Sun, 28 Oct 2018 22:38:40 +0800</pubDate>
      
      <guid>http://flyingfang.github.io/post/soft-skills/</guid>
      
        <description>&lt;h2 id=&#34;一简介&#34;&gt;一、简介&lt;/h2&gt;
&lt;p&gt;《软技能》是一本面向程序员又不仅限于程序员的职业生活指南。本书不光从职业发展上给予读者指导，还涵盖自我营销、学习方法、任务管理、身心健康和理财相关等。是一本大纲式的清单类书籍，适合给迷茫阶段的人（对，是我），一点点指导和鸡汤。&lt;/p&gt;
&lt;h2 id=&#34;二读书笔记&#34;&gt;二、读书笔记&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;http://xflying-blog.cdn.bcebos.com/softSkills.png&#34; alt=&#34;《软技能》读书笔记&#34;&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>[网络工具进阶] - tcpdump详解</title>
      <link>http://flyingfang.github.io/post/tcpdump/</link>
      <pubDate>Tue, 23 Oct 2018 18:38:40 +0800</pubDate>
      
      <guid>http://flyingfang.github.io/post/tcpdump/</guid>
      
        <description>&lt;h2 id=&#34;一简介&#34;&gt;一、简介&lt;/h2&gt;
&lt;p&gt;tcpdump是一个在运行在命令行下的嗅探工具。它允许用户拦截和显示发送或收到过网络连接到该计算机的TCP/IP和其他数据包。&lt;/p&gt;
&lt;p&gt;tcpdump能够分析网络行为，性能和应用产生或接收网络流量。它支持针对网络层、协议、主机、网络或端口的过滤，并提供and、or、not等逻辑语句来帮助你去掉无用的信息，从而使用户能够进一步找出问题的根源。&lt;/p&gt;
&lt;h2 id=&#34;二基本语法&#34;&gt;二、基本语法&lt;/h2&gt;
&lt;h3 id=&#34;命令行选项&#34;&gt;命令行选项&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数选项&lt;/th&gt;
&lt;th&gt;用法&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;-i&lt;/td&gt;
&lt;td&gt;指定监听的网络端口。如果未指定，则选择端口号最小的端口（不包括环回口）。如果要监听所有的端口，使用&lt;code&gt;any&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-D&lt;/td&gt;
&lt;td&gt;打印当前可用于tcpdump监听的网络端口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-n&lt;/td&gt;
&lt;td&gt;不解析主机名，只显示IP地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-nn&lt;/td&gt;
&lt;td&gt;不解析主机名或对应的服务名，而是显示 IP 地址和端口号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-q&lt;/td&gt;
&lt;td&gt;显示更少的协议信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-v&lt;/td&gt;
&lt;td&gt;详细输出，如 TTL、总长度、IP 包选项、IP/ICMP 报头校验和&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-vv&lt;/td&gt;
&lt;td&gt;更详细的输出，如打印NFS附加字段，SMB数据包等。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-vvv&lt;/td&gt;
&lt;td&gt;更更详细的输出，如打印telnet SB &amp;hellip; SE选项等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-t&lt;/td&gt;
&lt;td&gt;不显示时间戳&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-tt&lt;/td&gt;
&lt;td&gt;显示自 1970-01-01 00:00:00 UTC 起的秒数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-ttt&lt;/td&gt;
&lt;td&gt;显示当前和前一个数据包这两个数据包之间的时间差（微秒）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-tttt&lt;/td&gt;
&lt;td&gt;显示年月日、时分秒&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-ttttt&lt;/td&gt;
&lt;td&gt;显示当前数据包相对第一个数据包的时间差（微秒）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-A&lt;/td&gt;
&lt;td&gt;以 ASCII 显示数据包（不包括链路层头部信息）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-X&lt;/td&gt;
&lt;td&gt;以 ASCII 和 Hex 显示数据包（不包括链路层头部信息）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-XX&lt;/td&gt;
&lt;td&gt;以 ASCII 和 Hex 显示数据包（包括链路层头部信息）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-e&lt;/td&gt;
&lt;td&gt;打印链路层头部（比如 MAC 地址信息）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-c N&lt;/td&gt;
&lt;td&gt;只捕获 N 个数据包，捕获完成后自动退出&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-s SIZE&lt;/td&gt;
&lt;td&gt;定义捕获的数据包大小（字节为单位）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-S&lt;/td&gt;
&lt;td&gt;打印绝对序列号而不是相对序列号（TCP）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-l&lt;/td&gt;
&lt;td&gt;打印时使用行缓冲，这在使用管道时非常方便&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-w&lt;/td&gt;
&lt;td&gt;将捕获到的数据包保存至 pcap 文件中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-r&lt;/td&gt;
&lt;td&gt;从 pcap 文件中读取数据包并进行分析&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;过滤表达式&#34;&gt;过滤表达式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;type&lt;/code&gt;类型：&lt;code&gt;host&lt;/code&gt;主机、&lt;code&gt;net&lt;/code&gt;网段、&lt;code&gt;port&lt;/code&gt;端口号，&lt;code&gt;portrange&lt;/code&gt;端口范围&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dir&lt;/code&gt;方向：&lt;code&gt;src&lt;/code&gt;来源、&lt;code&gt;dst&lt;/code&gt; 目的&lt;/li&gt;
&lt;li&gt;&lt;code&gt;proto&lt;/code&gt;协议：&lt;code&gt;ip&lt;/code&gt;、&lt;code&gt;ip6&lt;/code&gt;、&lt;code&gt;arp&lt;/code&gt;、&lt;code&gt;rarp&lt;/code&gt;、&lt;code&gt;icmp&lt;/code&gt;、&lt;code&gt;tcp&lt;/code&gt;、&lt;code&gt;udp&lt;/code&gt;…等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;顺序是从前到后依次 &lt;code&gt;proto &lt;/code&gt; &lt;code&gt;dir&lt;/code&gt; &lt;code&gt;type&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;表达式优先级从高到低依次 &lt;code&gt;not&lt;/code&gt; &lt;code&gt;and&lt;/code&gt; &lt;code&gt;or&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;三数据结果解析&#34;&gt;三、数据结果解析&lt;/h2&gt;
&lt;h3 id=&#34;tcp-标志位&#34;&gt;tcp 标志位&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SYN&lt;/code&gt;，显示为&lt;code&gt;S&lt;/code&gt;，同步标志位，用于建立会话连接，同步序列号；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ACK&lt;/code&gt;，显示为&lt;code&gt;.&lt;/code&gt;，确认标志位，对已接收的数据包进行确认；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FIN&lt;/code&gt;，显示为&lt;code&gt;F&lt;/code&gt;，完成标志位，表示我已经没有数据要发送了，即将关闭连接；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RESET&lt;/code&gt;，显示为&lt;code&gt;R&lt;/code&gt;，重置标志位，用于连接复位、拒绝错误和非法的数据包；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PUSH&lt;/code&gt;，显示为&lt;code&gt;P&lt;/code&gt;，推送标志位，表示该数据包被对方接收后应立即交给上层应用，而不在缓冲区排队；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;URGENT&lt;/code&gt;，显示为&lt;code&gt;U&lt;/code&gt;，紧急标志位，表示数据包的紧急指针域有效，用来保证连接不被阻断，并督促中间设备尽快处理；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;示例分析&#34;&gt;示例分析&lt;/h3&gt;
&lt;p&gt;抓取80端口的数据包，一段访问web网站的数据包&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@flying_lab ~&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# tcpdump -Snnvvv -i eth0 &amp;#34;tcp and port 80&amp;#34;&lt;/span&gt;
tcpdump: listening on eth0, link-type EN10MB &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Ethernet&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, capture size &lt;span class=&#34;m&#34;&gt;262144&lt;/span&gt; bytes
18:12:32.794115 IP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;tos 0x0, ttl 64, id 33685, offset 0, flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;DF&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, proto TCP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;6&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, length 60&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    172.21.22.16.52804 &amp;gt; 169.254.0.4.80: Flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;S&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, cksum 0x6c56 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0x81ab&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, seq 3103604091, win 29200, options &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;mss 1460,sackOK,TS val &lt;span class=&#34;m&#34;&gt;1679867630&lt;/span&gt; ecr 0,nop,wscale 7&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, length &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
18:12:32.797635 IP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;tos 0x0, ttl 55, id 0, offset 0, flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;DF&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, proto TCP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;6&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, length 52&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    169.254.0.4.80 &amp;gt; 172.21.22.16.52804: Flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;S.&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, cksum 0xf6ec &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;correct&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, seq 2835834104, ack 3103604092, win 14600, options &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;mss 1424,nop,nop,sackOK,nop,wscale 1&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, length &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
18:12:32.797671 IP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;tos 0x0, ttl 64, id 33686, offset 0, flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;DF&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, proto TCP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;6&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, length 40&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    172.21.22.16.52804 &amp;gt; 169.254.0.4.80: Flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;.&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, cksum 0x6c42 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0x6fb8&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, seq 3103604092, ack 2835834105, win 229, length &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
18:12:32.797758 IP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;tos 0x0, ttl 64, id 33687, offset 0, flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;DF&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, proto TCP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;6&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, length 221&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    172.21.22.16.52804 &amp;gt; 169.254.0.4.80: Flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;P.&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, cksum 0x6cf7 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0xb4f5&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, seq 3103604092:3103604273, ack 2835834105, win 229, length 181: HTTP, length: &lt;span class=&#34;m&#34;&gt;181&lt;/span&gt;
	POST /ca_report.cgi HTTP/1.1
	Accept-Encoding: identity
	Content-Length: &lt;span class=&#34;m&#34;&gt;531&lt;/span&gt;
	Host: 169.254.0.4
	Content-Type: application/json
	Connection: close
	User-Agent: Python-urllib/2.6

18:12:32.801234 IP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;tos 0x0, ttl 55, id 22569, offset 0, flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;DF&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, proto TCP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;6&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, length 40&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    169.254.0.4.80 &amp;gt; 172.21.22.16.52804: Flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;.&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, cksum 0x514c &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;correct&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, seq 2835834105, ack 3103604273, win 7836, length &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
18:12:32.801254 IP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;tos 0x0, ttl 64, id 33688, offset 0, flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;DF&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, proto TCP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;6&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, length 571&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    172.21.22.16.52804 &amp;gt; 169.254.0.4.80: Flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;P.&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, cksum 0x6e55 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0x42b1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, seq 3103604273:3103604804, ack 2835834105, win 229, length 531: HTTP
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;tcp三次握手&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 第一次握手 [SYN]&lt;/span&gt;
18:18:46.793808 IP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;tos 0x0, ttl 64, id 11367, offset 0, flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;DF&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, proto TCP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;6&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, length 60&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    172.21.22.16.53094 &amp;gt; 169.254.0.4.80: Flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;S&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, cksum 0x6c56 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0x8926&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, seq 3643563961, win 29200, options &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;mss 1460,sackOK,TS val &lt;span class=&#34;m&#34;&gt;1680241630&lt;/span&gt; ecr 0,nop,wscale 7&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, length &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 第二次握手 [SYN+ACK]&lt;/span&gt;
18:18:46.797280 IP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;tos 0x0, ttl 55, id 0, offset 0, flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;DF&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, proto TCP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;6&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, length 52&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    169.254.0.4.80 &amp;gt; 172.21.22.16.53094: Flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;S.&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, cksum 0xf538 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;correct&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, seq 1445164545, ack 3643563962, win 14600, options &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;mss 1424,nop,nop,sackOK,nop,wscale 1&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, length &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 第三次握手 [ACK]&lt;/span&gt;
18:18:46.797317 IP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;tos 0x0, ttl 64, id 11368, offset 0, flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;DF&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, proto TCP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;6&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, length 40&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    172.21.22.16.53094 &amp;gt; 169.254.0.4.80: Flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;.&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, cksum 0x6c42 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0x6e04&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, seq 3643563962, ack 1445164546, win 229, length &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;Client 发送连接请求（SYN; seq: 3643563961），进入&lt;code&gt;SYN-SENT&lt;/code&gt;状态；&lt;/li&gt;
&lt;li&gt;Server 响应连接请求（SYN+ACK; seq: 1445164545; ack: 3643563962），进入&lt;code&gt;SYN-RCVD&lt;/code&gt;状态；&lt;/li&gt;
&lt;li&gt;Client 确认 ack 值，进入&lt;code&gt;ESTABLISHED&lt;/code&gt;状态，同时发送确认包（ACK; seq: 3643563962; ack: 1445164546）；Server 确认 ack 值，进入&lt;code&gt;ESTABLISHED&lt;/code&gt;状态；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;数据传输&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Client 发送请求 [PUSH]&lt;/span&gt;
18:18:46.800847 IP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;tos 0x0, ttl 64, id 11370, offset 0, flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;DF&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, proto TCP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;6&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, length 249&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    172.21.22.16.53094 &amp;gt; 169.254.0.4.80: Flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;P.&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, cksum 0x6d13 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0x9d98&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, seq 3643564143:3643564352, ack 1445164546, win 229, length 209: HTTP
&lt;span class=&#34;c1&#34;&gt;# Server 确认请求 [ACK]&lt;/span&gt;
18:18:46.804214 IP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;tos 0x0, ttl 55, id 64566, offset 0, flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;DF&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, proto TCP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;6&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, length 40&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    169.254.0.4.80 &amp;gt; 172.21.22.16.53094: Flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;.&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, cksum 0x4caf &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;correct&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, seq 1445164546, ack 3643564352, win 8372, length &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Server 响应请求 [PUSH]&lt;/span&gt;
18:18:46.804256 IP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;tos 0x0, ttl 55, id 64567, offset 0, flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;DF&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, proto TCP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;6&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, length 168&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    169.254.0.4.80 &amp;gt; 172.21.22.16.53094: Flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;P.&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, cksum 0xe8d0 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;correct&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, seq 1445164546:1445164674, ack 3643564352, win 8372, length 128: HTTP, length: &lt;span class=&#34;m&#34;&gt;128&lt;/span&gt;
	HTTP/1.1 &lt;span class=&#34;m&#34;&gt;200&lt;/span&gt; OK
	Connection: close
	Content-Length: &lt;span class=&#34;m&#34;&gt;70&lt;/span&gt;

	&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;returnValue&amp;#34;&lt;/span&gt;:0,&lt;span class=&#34;s2&#34;&gt;&amp;#34;returnCode&amp;#34;&lt;/span&gt;:0,&lt;span class=&#34;s2&#34;&gt;&amp;#34;msg&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;OK&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;seq&amp;#34;&lt;/span&gt;:14419936819469917437&lt;span class=&#34;o&#34;&gt;}[&lt;/span&gt;!http&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Client 确认响应 [ACK]&lt;/span&gt;
18:18:46.804263 IP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;tos 0x0, ttl 64, id 11371, offset 0, flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;DF&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, proto TCP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;6&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, length 40&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    172.21.22.16.53094 &amp;gt; 169.254.0.4.80: Flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;.&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, cksum 0x6c42 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0x6bf6&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, seq 3643564352, ack 1445164674, win 237, length &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;tcp四次挥手&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Client 告诉 Server，我已经没有数据要发送了 [FIN]&lt;/span&gt;
18:27:38.766403 IP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;tos 0x0, ttl 64, id 11490, offset 0, flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;DF&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, proto TCP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;6&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, length 40&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    172.21.22.16.59770 &amp;gt; 115.182.203.2.80: Flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;.&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, cksum 0x00f9 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0x1fc3&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, seq 2956639571, ack 2379655446, win 237, length &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Server 收到后，告诉 Client，你再等会 [ACK]&lt;/span&gt;
18:27:38.766682 IP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;tos 0x0, ttl 64, id 11491, offset 0, flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;DF&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, proto TCP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;6&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, length 40&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    172.21.22.16.59770 &amp;gt; 115.182.203.2.80: Flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;F.&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, cksum 0x00f9 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0x1fc2&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, seq 2956639571, ack 2379655446, win 237, length &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Server 告诉 Client，我也没数据要发送了 [FIN + ACK]&lt;/span&gt;
18:27:38.771154 IP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;tos 0x64, ttl 53, id 63129, offset 0, flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;DF&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, proto TCP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;6&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, length 40&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    115.182.203.2.80 &amp;gt; 172.21.22.16.59770: Flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;F.&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, cksum 0x203b &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;correct&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, seq 2379655446, ack 2956639572, win 115, length &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Client 收到后，告诉 Server，好的 [ACK]&lt;/span&gt;
18:27:38.771170 IP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;tos 0x0, ttl 64, id 11492, offset 0, flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;DF&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, proto TCP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;6&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, length 40&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    172.21.22.16.59770 &amp;gt; 115.182.203.2.80: Flags &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;.&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, cksum 0x00f9 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;incorrect -&amp;gt; 0x1fc1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, seq 2956639572, ack 2379655447, win 237, length &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;Client 发送 FIN 包，告诉 Server：我已经没有数据要发送了，我们关闭连接吧；进入&lt;code&gt;FIN-WAIT-1&lt;/code&gt;状态；&lt;/li&gt;
&lt;li&gt;Server 收到 FIN 包后，知道 Client 要准备关闭连接了，于是回复 ACK 包，告诉 Client：我知道了；进入&lt;code&gt;CLOSE-WAIT&lt;/code&gt;状态；Client 收到 ACK 包后，知道 Server 还有些事要准备（如将未发送的数据发送完），于是继续等待，进入&lt;code&gt;FIN-WAIT-2&lt;/code&gt;状态；&lt;/li&gt;
&lt;li&gt;Server 准备完毕后，也发送 FIN 包，告诉 Client，我也没有数据要发送了，即将关闭连接了哦，进入&lt;code&gt;LAST-ACK&lt;/code&gt;状态；&lt;/li&gt;
&lt;li&gt;Client 收到 FIN 包后，知道 Server 已经准备完毕并且即将关闭连接，于是发送 ACK 包，告诉 Server 已收到，进入&lt;code&gt;TIME-WAIT&lt;/code&gt;状态；Server 收到 ACK 包后，进入&lt;code&gt;CLOSED&lt;/code&gt;状态；Client 等待 2MSL 时间后，没有再次收到 Server 的 FIN 包，因此确认 Server 已经收到了 ACK 包并已关闭，于是 Client 也进入&lt;code&gt;CLOSED&lt;/code&gt;状态；&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;四常见示例&#34;&gt;四、常见示例&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;过滤主机&lt;/p&gt;
&lt;p&gt;1.1 监听所有目的或源地址是10.20.0.1的网络数据&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;tcpdump host 10.20.0.1
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;​	1.2  监听所有目的地址是10.20.0.1的网络数据&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;tcpdump dst host 10.20.0.1
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;​	1.3  监听所有源地址是10.20.0.1的网络数据&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;tcpdump src host 10.20.0.1
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;过滤端口&lt;/p&gt;
&lt;p&gt;2.1 抓取所有经过eth0，目的或源端口是22的网络数据&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;tcpdump -i eth0 port &lt;span class=&#34;m&#34;&gt;22&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;​	2.2 指定源端口&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;tcpdump -i eth0 src port &lt;span class=&#34;m&#34;&gt;22&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;​	2.3 指定目的端口&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;tcpdump -i eth0 dst port &lt;span class=&#34;m&#34;&gt;22&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;过滤网络&lt;/p&gt;
&lt;p&gt;3.1 抓取所有经过eth0，目的或源网段是10.20的网络数据&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;tcpdump -i eth0 net 10.20
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;​	3.2 指定源网段&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;tcpdump -i eth0 src net 10.20
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;​	3.3 指定目的网段&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;tcpdump -i eth0 dst net 10.20
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;过滤协议&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;tcpdump -i eth1 arp
tcpdump -i eth1 ip
tcpdump -i eth1 tcp
tcpdump -i eth1 udp
tcpdump -i eth1 icmp
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;5.常用表达式&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;非 : ! or &lt;span class=&#34;s2&#34;&gt;&amp;#34;not&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;去掉双引号&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;  
且 : &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; or &lt;span class=&#34;s2&#34;&gt;&amp;#34;and&amp;#34;&lt;/span&gt;  
或 : &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; or &lt;span class=&#34;s2&#34;&gt;&amp;#34;or&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;​	5.1 抓取所有经过eth2，源地址是10.20.0.60或者10.20.0.22的ICMP流量&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;tcpdump -i eth2 &lt;span class=&#34;s1&#34;&gt;&amp;#39;(icmp) and (src host 10.20.0.60 or src host 10.20.0.22)&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;​	5.2 抓取所有经过eth2，源网段是10.20，但目的主机不是10.20.0.60的ICMP流量&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;tcpdump -i eth2 &lt;span class=&#34;s1&#34;&gt;&amp;#39;(icmp) and ((src net 10.20) and (not src host 10.20.0.60))&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>[读书笔记] - Google高效工作法</title>
      <link>http://flyingfang.github.io/post/google-works/</link>
      <pubDate>Sat, 08 Sep 2018 20:23:09 +0800</pubDate>
      
      <guid>http://flyingfang.github.io/post/google-works/</guid>
      
        <description>&lt;h3 id=&#34;1--选择管理&#34;&gt;1.  选择管理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;你的精力/时间有限，对一件事Say Yes，另一件Say No&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选择管理的核心原则，把时间，精力集中在对职业发展，个人成长重要的事情上&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用动态的眼光看选择管理，前半年没有选择的事情，也许后半年就是工作重点&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-8080原则&#34;&gt;2. 8080原则&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;定义：把80%的时间花在能为公司和个人成长带来80%效益的工作上&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;找到公司战略/个人成长目标，持续关注这个重点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;方法：头重脚轻模式+免打扰模式&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-利用碎片化时间&#34;&gt;3. 利用碎片化时间&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;大块时间——高度专注的事情&lt;/li&gt;
&lt;li&gt;中等碎片（睡觉/思考）&lt;/li&gt;
&lt;li&gt;小块碎片&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-体能管理&#34;&gt;4. 体能管理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;呼吸模式&lt;/li&gt;
&lt;li&gt;吃的东西与时间（少食多餐）&lt;/li&gt;
&lt;li&gt;睡眠长短与质量（灵活用小憩去恢复体能）&lt;/li&gt;
&lt;li&gt;锻炼身体&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5-情绪管理&#34;&gt;5. 情绪管理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;原因：杏仁核（恐惧、压力、威胁）&lt;/li&gt;
&lt;li&gt;学会站在第三方的角度&lt;/li&gt;
&lt;li&gt;管理情绪的方法：提高觉察力；暂停；再思考。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;6-正念课&#34;&gt;6. 正念课&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;发现你的内心（Search Inside Yourself）
&lt;ul&gt;
&lt;li&gt;注意力训练&lt;/li&gt;
&lt;li&gt;自我认知&lt;/li&gt;
&lt;li&gt;自我控制&lt;/li&gt;
&lt;li&gt;精神培养&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;方法论：觉察；冥想。&lt;/li&gt;
&lt;li&gt;好处：
&lt;ul&gt;
&lt;li&gt;改进生活态度，改善健康状况，提升生活质量和工作效率&lt;/li&gt;
&lt;li&gt;化繁为简，在日常压力中让你变得更加顺应和达观&lt;/li&gt;
&lt;li&gt;帮助你获得更大的价值感、满足感和愉悦感。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;7-优势管理长板定律&#34;&gt;7. 优势管理——长板定律&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;发现自己的长板，并通过投资时间/精力在这个领域，不断加强自己的长板，发挥最大的潜能和力量，最大化个人价值和收益&lt;/li&gt;
&lt;li&gt;盖洛普优势识别器
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://types.yuzeli.com/survey/gallup&#34;&gt;测试链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;个人结果：
你的主要才干是：策略思维，前五大优势为：理念 思维 学习 体谅 战略&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;乔哈里之窗——四个象限：优势区、盲点区、隐藏区和潜力区&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;8-深度工作法&#34;&gt;8. 深度工作法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;高质量的工作产出=时间x专注度&lt;/li&gt;
&lt;li&gt;心流&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;9-工作和生活的平衡点&#34;&gt;9. 工作和生活的平衡点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;遵循生物钟规律&lt;/li&gt;
&lt;li&gt;多做一些有趣的事&lt;/li&gt;
&lt;li&gt;学会说不&lt;/li&gt;
&lt;li&gt;提升专注力&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;10-营造公开沟通的利器&#34;&gt;10. 营造公开沟通的利器&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Dory——参会者在线提问，而其他参会者可以投票决定这个问题是否该被回答。&lt;/li&gt;
&lt;li&gt;要培养员工和公司之前的信任感&lt;/li&gt;
&lt;li&gt;要建立公开透明的沟通方式&lt;/li&gt;
&lt;li&gt;营造开放式办公环境&lt;/li&gt;
&lt;li&gt;管理层心态&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;11-表达能力&#34;&gt;11. 表达能力&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;表达的效果 55% 来自身体语言，38% 来自语音，而只有 7% 来自文字&lt;/li&gt;
&lt;li&gt;首先，表达能力的修炼从身体语言开始&lt;/li&gt;
&lt;li&gt;其次，表达能力时再语言能力基础上发展的一种能力&lt;/li&gt;
&lt;li&gt;再次，学会有逻辑的表达&lt;/li&gt;
&lt;li&gt;第四，学会即兴表达&lt;/li&gt;
&lt;li&gt;第五，练习&lt;/li&gt;
&lt;li&gt;最后，也是最重要的一点，是关于如何建议与批评的。多肯定，少否定，赞美多于批评。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;12-googler使用说明书&#34;&gt;12. googler使用说明书&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;你的产地，性能，维修保养，注意事项，优势，性格特质，喜欢怎样工作&lt;/li&gt;
&lt;li&gt;增加彼此的了解&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;13-高效办公工具&#34;&gt;13. 高效办公工具&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Google Docs——石墨文档&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;14-googlegeist&#34;&gt;14. Googlegeist&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Google内部的员工幸福度调查&lt;/li&gt;
&lt;li&gt;行不通的时候，只需遵循一条简单的原则：上报到公司上一层，摆出事实。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;15-如何讲好个故事&#34;&gt;15. 如何讲好个故事&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;营造出冲突&lt;/li&gt;
&lt;li&gt;讲出你的感情&lt;/li&gt;
&lt;li&gt;让别人感同身受&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;16-邮件&#34;&gt;16. 邮件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;邮件的元素：标题，正文，收件人，抄送人&lt;/li&gt;
&lt;li&gt;如何写一封得体的邮件
&lt;ul&gt;
&lt;li&gt;写之前考虑清楚，到底有没有必要&lt;/li&gt;
&lt;li&gt;让收件人看完能立刻明白你在说什么，需要他怎样配合&lt;/li&gt;
&lt;li&gt;标题一定要让收件人看完就能明白这是关于什么事，需要他做什么&lt;/li&gt;
&lt;li&gt;只抄送给相关的人&lt;/li&gt;
&lt;li&gt;正文符合KISS原则（keep it simple，stupid），结构清晰：打招呼，邮件背景，具体情况，需要收件人做什么，结束&lt;/li&gt;
&lt;li&gt;结尾表明期望&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如何管理邮件
&lt;ul&gt;
&lt;li&gt;学会做标签&lt;/li&gt;
&lt;li&gt;分类归档&lt;/li&gt;
&lt;li&gt;合理规划看邮件的时间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;17-视觉化呈现&#34;&gt;17. 视觉化呈现&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;这是基于大脑喜欢的信息接收、处理方式智商的信息沟通模式&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;18-扁平化管理&#34;&gt;18. 扁平化管理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;扁平化的管理使上传下达更快，更精准，决策流程更快，员工会有更多空间发挥自主性和积极性&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;19-数据决策&#34;&gt;19. 数据决策&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;依据决策相关的各种因素的数据、及数据之间的逻辑关系来做判断，而不是主观判断。&lt;/li&gt;
&lt;li&gt;数据可以让决策更有说服力&lt;/li&gt;
&lt;li&gt;数据的魔力在于不仅仅是事后的分析评估，更是能够在某种程度上“预知未来”。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;20-高效会议&#34;&gt;20. 高效会议&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;所有的会议有清晰的目的&lt;/li&gt;
&lt;li&gt;确定两类人：一是会议主持人，二是会议参加人&lt;/li&gt;
&lt;li&gt;学会提前退场&lt;/li&gt;
&lt;li&gt;提前告知，尽量不开临时会议&lt;/li&gt;
&lt;li&gt;会议礼仪&lt;/li&gt;
&lt;li&gt;高效会议的关键：
&lt;ul&gt;
&lt;li&gt;会一定要提前规划，设计会议的相关细节提前确定&lt;/li&gt;
&lt;li&gt;两个人以上的会议一定要有主持人&lt;/li&gt;
&lt;li&gt;会议中尽可能按照日程进行，确保大家是一个投入的状态&lt;/li&gt;
&lt;li&gt;会议结束后，一定有行动计划&lt;/li&gt;
&lt;li&gt;不要随意取消、修改会议时间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;21-okrs&#34;&gt;21. OKRs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;目标关键结果&lt;/li&gt;
&lt;li&gt;O就是目标，代表了我想要达成什么&lt;/li&gt;
&lt;li&gt;KR是关键成果，代表了我如何完成目标以及用什么标准来衡量是否达成&lt;/li&gt;
&lt;li&gt;OKR 能找出对企业发展真正重要的事&lt;/li&gt;
&lt;li&gt;OKRs的原则：
&lt;ul&gt;
&lt;li&gt;有足够挑战&lt;/li&gt;
&lt;li&gt;公开透明&lt;/li&gt;
&lt;li&gt;只要完成60-70%就是很好的OKR了，不用担心达不成目标&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>设备唯一性标识知多少？</title>
      <link>http://flyingfang.github.io/post/uuid/</link>
      <pubDate>Thu, 30 Aug 2018 13:05:14 +0800</pubDate>
      
      <guid>http://flyingfang.github.io/post/uuid/</guid>
      
        <description>&lt;h2 id=&#34;imei&#34;&gt;IMEI&lt;/h2&gt;
&lt;h3 id=&#34;android&#34;&gt;Android：&lt;/h3&gt;
&lt;p&gt;一串15位的号码。需要权限&amp;lt;uses-permissionandroid:name=&amp;quot;android.permission.READ_PHONE_STATE&amp;rdquo; /&amp;gt;&lt;/p&gt;
&lt;p&gt;拿不到IMEI的情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;某些魔改版rom&lt;/li&gt;
&lt;li&gt;模拟器&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ios&#34;&gt;iOS：&lt;/h3&gt;
&lt;p&gt;iOS5之后已经废弃，苹果禁止APP获取IMEI号。&lt;/p&gt;
&lt;h2 id=&#34;idfa&#34;&gt;IDFA&lt;/h2&gt;
&lt;h3 id=&#34;android-1&#34;&gt;Android：&lt;/h3&gt;
&lt;p&gt;2014年Android2.3基于Google Play推出了IDFA。但国内市场由于阉割Google Play，无法获得IDFA号，除非用户自行root并安装Google Play。&lt;/p&gt;
&lt;h3 id=&#34;ios-1&#34;&gt;iOS：&lt;/h3&gt;
&lt;p&gt;广告标示符。iOS6.0+适用。&lt;/p&gt;
&lt;p&gt;获取代码：[[[ASIdentifierManager sharedManager] advertisingIdentifier]UUIDString];&lt;/p&gt;
&lt;p&gt;以下几种情况会重新生成IDFA：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;还原位置与隐私（eg iOS12+:设置-&amp;gt;通用-&amp;gt;还原→还原位置与隐私）&lt;/li&gt;
&lt;li&gt;还原广告标志符（eg iOS12+:隐私-&amp;gt;广告-&amp;gt;还原广告标志符）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;idfv&#34;&gt;IDFV&lt;/h2&gt;
&lt;h3 id=&#34;ios-2&#34;&gt;iOS：&lt;/h3&gt;
&lt;p&gt;IDFV是App隔离的，某一App内部获取到给用户的IDFV是稳定不变的。不同App之间获取的IDFV不同。iOS6.0+适用。&lt;/p&gt;
&lt;p&gt;获取代码：[[[UIDevice currentDevice]identifierForVendor] UUIDString]&lt;/p&gt;
&lt;p&gt;iOS推荐使用此方式为唯一标志。&lt;/p&gt;
&lt;h2 id=&#34;udid&#34;&gt;UDID&lt;/h2&gt;
&lt;h3 id=&#34;ios-3&#34;&gt;iOS：&lt;/h3&gt;
&lt;p&gt;设备唯一标志码。一串40位长度的号码。iOS6.0+后废弃。&lt;/p&gt;
&lt;h2 id=&#34;mac&#34;&gt;MAC&lt;/h2&gt;
&lt;h3 id=&#34;android-2&#34;&gt;Android：&lt;/h3&gt;
&lt;p&gt;无线网卡的MAC地址。&lt;/p&gt;
&lt;p&gt;注意：Android 6.0+ 之后，通过 BluetoothAdapter.getDefaultAdapter().getAddress()  会获取固定的“02:00:00:00:00:00”。可以使用NetworkInterface.getHardwareAddress。&lt;/p&gt;
&lt;h3 id=&#34;ios-4&#34;&gt;iOS：&lt;/h3&gt;
&lt;p&gt;无线网卡的MAC地址。iOS7.0+之后废弃。&lt;/p&gt;
&lt;h2 id=&#34;openudid&#34;&gt;OpenUDID&lt;/h2&gt;
&lt;h3 id=&#34;android-3&#34;&gt;Android：&lt;/h3&gt;
&lt;p&gt;第三方API。多APP间共享一个ID。&lt;/p&gt;
&lt;h3 id=&#34;ios-5&#34;&gt;iOS：&lt;/h3&gt;
&lt;p&gt;第三方API，原理是由第一个使用openudid的app生成，并存放到系统粘贴版(具体也不理解什么原理)，之后安装的其他app去粘贴版取。&lt;/p&gt;
&lt;p&gt;重新生成OpenUDID的情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;抹掉所有数据&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;uuid&#34;&gt;UUID&lt;/h2&gt;
&lt;h3 id=&#34;ios-6&#34;&gt;iOS：&lt;/h3&gt;
&lt;p&gt;通用唯一识别码。可以通过UUID+keyChain的方式维护。&lt;/p&gt;
&lt;p&gt;获取代码：NSString *uuid = [KKUUIDManager readUUID];&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>[每日一个Linux命令]——ps详解</title>
      <link>http://flyingfang.github.io/post/ps/</link>
      <pubDate>Wed, 04 Apr 2018 00:16:50 +0800</pubDate>
      
      <guid>http://flyingfang.github.io/post/ps/</guid>
      
        <description>&lt;h2 id=&#34;1-ps&#34;&gt;1. ps&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ps&lt;/code&gt;是&lt;code&gt;Process Status&lt;/code&gt;的简称，ps命令用来列出系统中当前运行的那些进程。ps命令列出的是当前那些进程的快照，就是执行ps命令的那个时刻的那些进程，如果想要动态的显示进程信息，就可以使用top命令。&lt;/p&gt;
&lt;p&gt;要对进程进行监测和控制，首先必须要了解当前进程的情况，也就是需要查看当前进程，而 ps 命令就是最基本同时也是非常强大的进程查看命令。使用该命令可以确定有哪些进程正在运行和运行的状态、进程是否结束、进程有没有僵死、哪些进程占用了过多的资源等等。总之大部分信息都是可以通过执行该命令得到的。&lt;/p&gt;
&lt;p&gt;ps 为我们提供了进程的一次性的查看，它所提供的查看结果并不动态连续的；如果想对进程时间监控，应该用 top 工具。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;linux上进程有5种状态:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;运行(正在运行或在运行队列中等待)&lt;/li&gt;
&lt;li&gt;中断(休眠中, 受阻, 在等待某个条件的形成或接受到信号)&lt;/li&gt;
&lt;li&gt;不可中断(收到信号不唤醒和不可运行, 进程必须等待直到有中断发生)&lt;/li&gt;
&lt;li&gt;僵死(进程已终止, 但进程描述符存在, 直到父进程调用wait4()系统调用后释放)&lt;/li&gt;
&lt;li&gt;停止(进程收到SIGSTOP, SIGTSTP, SIGTTIN, SIGTTOU信号后停止运行运行)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;ps工具标识进程的5种状态码:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;D 不可中断 uninterruptible sleep (usually IO)&lt;/li&gt;
&lt;li&gt;R 运行 runnable (on run queue)&lt;/li&gt;
&lt;li&gt;S 中断 sleeping&lt;/li&gt;
&lt;li&gt;T 停止 traced or stopped&lt;/li&gt;
&lt;li&gt;Z 僵死 a defunct (”zombie”) process&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-输出信息详解&#34;&gt;2. 输出信息详解&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;F 代表这个程序的旗标 (flag)， 4 代表使用者为 super user&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;S 代表这个程序的状态 (STAT)，关于各 STAT 的意义将在内文介绍&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UID 程序被该 UID 所拥有&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PID 进程的ID&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PPID 则是其上级父程序的ID&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C CPU 使用的资源百分比&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PRI 这个是 Priority (优先执行序) 的缩写，详细后面介绍&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NI 这个是 Nice 值，在下一小节我们会持续介绍&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ADDR 这个是 kernel function，指出该程序在内存的那个部分。如果是个 running的程序，一般就是 “-“&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SZ 使用掉的内存大小&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;WCHAN 目前这个程序是否正在运作当中，若为 - 表示正在运作&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TTY 登入者的终端机位置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TIME 使用掉的 CPU 时间。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CMD 所下达的指令为何&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3命令参数&#34;&gt;3.命令参数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;a 显示所有进程&lt;/li&gt;
&lt;li&gt;-a 显示同一终端下的所有程序&lt;/li&gt;
&lt;li&gt;-A 显示所有进程&lt;/li&gt;
&lt;li&gt;c 显示进程的真实名称&lt;/li&gt;
&lt;li&gt;-N 反向选择&lt;/li&gt;
&lt;li&gt;-e 等于“-A”&lt;/li&gt;
&lt;li&gt;e 显示环境变量&lt;/li&gt;
&lt;li&gt;f 显示程序间的关系&lt;/li&gt;
&lt;li&gt;-H 显示树状结构&lt;/li&gt;
&lt;li&gt;r 显示当前终端的进程&lt;/li&gt;
&lt;li&gt;T 显示当前终端的所有程序&lt;/li&gt;
&lt;li&gt;u 指定用户的所有进程&lt;/li&gt;
&lt;li&gt;-au 显示较详细的资讯&lt;/li&gt;
&lt;li&gt;-aux 显示所有包含其他使用者的行程&lt;/li&gt;
&lt;li&gt;-C&amp;lt;命令&amp;gt; 列出指定命令的状况&lt;/li&gt;
&lt;li&gt;–lines&amp;lt;行数&amp;gt; 每页显示的行数&lt;/li&gt;
&lt;li&gt;–width&amp;lt;字符数&amp;gt; 每页显示的字符数&lt;/li&gt;
&lt;li&gt;–help 显示帮助信息&lt;/li&gt;
&lt;li&gt;–version 显示版本显示&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4使用实例&#34;&gt;4.使用实例&lt;/h2&gt;
&lt;h3 id=&#34;实例1显示所有进程信息&#34;&gt;实例1：显示所有进程信息&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ ps -A
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;实例2显示指定用户信息&#34;&gt;实例2：显示指定用户信息&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ ps -u root
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;实例3显示所有进程信息连同命令行&#34;&gt;实例3：显示所有进程信息，连同命令行&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ ps -ef
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;实例4-ps-与grep-组合使用查找特定进程&#34;&gt;实例4： ps 与grep 组合使用，查找特定进程&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ ps -ef &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep ssh
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;实例5将与这次登入的-pid-与相关信息列示出来&#34;&gt;实例5：将与这次登入的 PID 与相关信息列示出来&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ ps -l
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;实例6列出目前所有的正在内存中的程序&#34;&gt;实例6：列出目前所有的正在内存中的程序&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ ps aux
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;备注&#34;&gt;备注&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;参考资料&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/ps.html&#34;&gt;Linux Tools Quick Tutorial&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>[每日一个Linux命令]——lsof详解</title>
      <link>http://flyingfang.github.io/post/lsof/</link>
      <pubDate>Tue, 03 Apr 2018 00:33:58 +0800</pubDate>
      
      <guid>http://flyingfang.github.io/post/lsof/</guid>
      
        <description>&lt;h2 id=&#34;1-lsof一切皆文件&#34;&gt;1. lsof一切皆文件&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;lsof&lt;/code&gt;是&lt;code&gt;list open files&lt;/code&gt;的简称，是一个查看当前系统文件的工具。乍一看不是一个特别强大的命令，但是由于unix系统的&lt;code&gt;everything is a file&lt;/code&gt;的哲学，它常常被运用于查看进程和查看进程所操作的文件，可以查看网络使用，设备信息等，实则非常强大。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;lsof  &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -?abChKlnNOPRtUvVX &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -A A &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -c c &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; +c c &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; +&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;-d d &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; +&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;-D D &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; +&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;-e s &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; +&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;-f &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;cfgGn&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -F &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;f&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -g &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;s&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -i &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -k k &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; +&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;-L &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;l&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; +&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;-m
m &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; +&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;-M &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -o &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;o&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -p s &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; +&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;-r &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;t&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;m&amp;lt;fmt&amp;gt;&lt;span class=&#34;o&#34;&gt;]]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -s &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;p:s&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -S &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;t&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -T &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;t&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -u s &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; +&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;-w &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -x &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;fl&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -z &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;z&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -Z &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;Z&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -- &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;names&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;lsof打开的文件可以是：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;普通文件&lt;/li&gt;
&lt;li&gt;目录&lt;/li&gt;
&lt;li&gt;网络文件系统的文件&lt;/li&gt;
&lt;li&gt;字符或设备文件&lt;/li&gt;
&lt;li&gt;(函数)共享库&lt;/li&gt;
&lt;li&gt;管道，命名管道&lt;/li&gt;
&lt;li&gt;符号链接&lt;/li&gt;
&lt;li&gt;网络文件（例如：NFS file、网络socket，unix域名socket）&lt;/li&gt;
&lt;li&gt;还有其它类型的文件，等等&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-输出信息详解&#34;&gt;2. 输出信息详解&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@VM_22_16_centos ~&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# lsof | head&lt;/span&gt;
COMMAND     PID  TID           USER   FD      TYPE             DEVICE  SIZE/OFF       NODE NAME
systemd       &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;                root  cwd       DIR              253,1      &lt;span class=&#34;m&#34;&gt;4096&lt;/span&gt;          &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; /
systemd       &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;                root  rtd       DIR              253,1      &lt;span class=&#34;m&#34;&gt;4096&lt;/span&gt;          &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; /
systemd       &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;                root  txt       REG              253,1   &lt;span class=&#34;m&#34;&gt;1482272&lt;/span&gt;     &lt;span class=&#34;m&#34;&gt;143260&lt;/span&gt; /usr/lib/systemd/systemd
systemd       &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;                root  mem       REG              253,1     &lt;span class=&#34;m&#34;&gt;20040&lt;/span&gt;     &lt;span class=&#34;m&#34;&gt;140232&lt;/span&gt; /usr/lib64/libuuid.so.1.3.0
systemd       &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;                root  mem       REG              253,1    &lt;span class=&#34;m&#34;&gt;256960&lt;/span&gt;     &lt;span class=&#34;m&#34;&gt;142089&lt;/span&gt; /usr/lib64/libblkid.so.1.1.0
systemd       &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;                root  mem       REG              253,1     &lt;span class=&#34;m&#34;&gt;90632&lt;/span&gt;     &lt;span class=&#34;m&#34;&gt;140176&lt;/span&gt; /usr/lib64/libz.so.1.2.7
systemd       &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;                root  mem       REG              253,1    &lt;span class=&#34;m&#34;&gt;153192&lt;/span&gt;     &lt;span class=&#34;m&#34;&gt;140161&lt;/span&gt; /usr/lib64/liblzma.so.5.0.99
systemd       &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;                root  mem       REG              253,1     &lt;span class=&#34;m&#34;&gt;19888&lt;/span&gt;     &lt;span class=&#34;m&#34;&gt;140513&lt;/span&gt; /usr/lib64/libattr.so.1.1.0
systemd       &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;                root  mem       REG              253,1     &lt;span class=&#34;m&#34;&gt;19776&lt;/span&gt;     &lt;span class=&#34;m&#34;&gt;143496&lt;/span&gt; /usr/lib64/libdl-2.17.so
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;列名&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;COMMAND&lt;/td&gt;
&lt;td&gt;命令名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PID&lt;/td&gt;
&lt;td&gt;进程ID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TID&lt;/td&gt;
&lt;td&gt;线程ID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;USER&lt;/td&gt;
&lt;td&gt;用户名&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FD&lt;/td&gt;
&lt;td&gt;文件描述符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TYPE&lt;/td&gt;
&lt;td&gt;文件类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DEVICE&lt;/td&gt;
&lt;td&gt;指定磁盘的名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SIZE/OFF&lt;/td&gt;
&lt;td&gt;文件的大小&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NODE&lt;/td&gt;
&lt;td&gt;索引节点（文件在磁盘上的标识）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NAME&lt;/td&gt;
&lt;td&gt;打开文件的确切名称&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;FD参数&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;（1）cwd：表示current work dirctory，即：应用程序的当前工作目录，这是该应用程序启动的目录，除非它本身对这个目录进行更改
（2）txt ：该类型的文件是程序代码，如应用程序二进制文件本身或共享库，如上列表中显示的 /sbin/init 程序
（3）lnn：library references &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;AIX&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
（4）er：FD information error &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;see NAME column&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
（5）jld：jail directory &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;FreeBSD&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
（6）ltx：shared library text &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;code and data&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
（7）mxx ：hex memory-mapped &lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt; number xx.
（8）m86：DOS Merge mapped file&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
（9）mem：memory-mapped file&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
（10）mmap：memory-mapped device&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
（11）pd：parent directory&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
（12）rtd：root directory&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
（13）tr：kernel trace file &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;OpenBSD&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
（14）v86  VP/ix mapped file&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
（15）0：表示标准输入
（16）1：表示标准输出
（17）2：表示标准错误
一般在标准输出、标准错误、标准输入后还跟着文件状态模式：r、w、u等
（1）u：表示该文件被打开并处于读取/写入模式
（2）r：表示该文件被打开并处于只读模式
（3）w：表示该文件被打开并处于
（4）空格：表示该文件的状态模式为unknow，且没有锁定
（5）-：表示该文件的状态模式为unknow，且被锁定
同时在文件状态模式后面，还跟着相关的锁
（1）N：for a Solaris NFS lock of unknown type&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
（2）r：for &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; lock on part of the file&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
（3）R：for a &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; lock on the entire file&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
（4）w：for a write lock on part of the file&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;（文件的部分写锁）
（5）W：for a write lock on the entire file&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;（整个文件的写锁）
（6）u：for a &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; and write lock of any length&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
（7）U：for a lock of unknown type&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
（8）x：for an SCO OpenServer Xenix lock on part      of the file&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
（9）X：for an SCO OpenServer Xenix lock on the      entire file&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
（10）space：if there is no lock.
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;TYPE参数&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;（1）DIR：表示目录
（2）CHR：表示字符类型
（3）BLK：块设备类型
（4）UNIX： UNIX 域套接字
（5）FIFO：先进先出 (FIFO) 队列
（6）IPv4：网际协议 (IP) 套接字
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;3命令参数&#34;&gt;3.命令参数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;-a 列出打开文件存在的进程&lt;/li&gt;
&lt;li&gt;-c&amp;lt;进程名&amp;gt; 列出指定进程所打开的文件&lt;/li&gt;
&lt;li&gt;-g 列出GID号进程详情&lt;/li&gt;
&lt;li&gt;-d&amp;lt;文件号&amp;gt; 列出占用该文件号的进程&lt;/li&gt;
&lt;li&gt;+d&amp;lt;目录&amp;gt; 列出目录下被打开的文件&lt;/li&gt;
&lt;li&gt;+D&amp;lt;目录&amp;gt; 递归列出目录下被打开的文件&lt;/li&gt;
&lt;li&gt;-n&amp;lt;目录&amp;gt; 列出使用NFS的文件&lt;/li&gt;
&lt;li&gt;-i&amp;lt;条件&amp;gt; 列出符合条件的进程。（4、6、协议、:端口、 @ip ）&lt;/li&gt;
&lt;li&gt;-p&amp;lt;进程号&amp;gt; 列出指定进程号所打开的文件&lt;/li&gt;
&lt;li&gt;-u 列出UID号进程详情&lt;/li&gt;
&lt;li&gt;-h 显示帮助信息&lt;/li&gt;
&lt;li&gt;-v 显示版本信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4使用实例&#34;&gt;4.使用实例&lt;/h2&gt;
&lt;h3 id=&#34;实例1通过lsof命令列出所有打开的文件&#34;&gt;实例1：通过lsof命令列出所有打开的文件&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ lsof
COMMAND     PID  TID           USER   FD      TYPE             DEVICE  SIZE/OFF       NODE NAME
systemd       &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;                root  cwd       DIR              253,1      &lt;span class=&#34;m&#34;&gt;4096&lt;/span&gt;          &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; /
systemd       &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;                root  rtd       DIR              253,1      &lt;span class=&#34;m&#34;&gt;4096&lt;/span&gt;          &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; /
systemd       &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;                root  txt       REG              253,1   &lt;span class=&#34;m&#34;&gt;1482272&lt;/span&gt;     &lt;span class=&#34;m&#34;&gt;143260&lt;/span&gt; /usr/lib/systemd/systemd
systemd       &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;                root  mem       REG              253,1     &lt;span class=&#34;m&#34;&gt;20040&lt;/span&gt;     &lt;span class=&#34;m&#34;&gt;140232&lt;/span&gt; /usr/lib64/libuuid.so.1.3.0
systemd       &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;                root  mem       REG              253,1    &lt;span class=&#34;m&#34;&gt;256960&lt;/span&gt;     &lt;span class=&#34;m&#34;&gt;142089&lt;/span&gt; /usr/lib64/libblkid.so.1.1.0
systemd       &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;                root  mem       REG              253,1     &lt;span class=&#34;m&#34;&gt;90632&lt;/span&gt;     &lt;span class=&#34;m&#34;&gt;140176&lt;/span&gt; /usr/lib64/libz.so.1.2.7
systemd       &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;                root  mem       REG              253,1    &lt;span class=&#34;m&#34;&gt;153192&lt;/span&gt;     &lt;span class=&#34;m&#34;&gt;140161&lt;/span&gt; /usr/lib64/liblzma.so.5.0.99
systemd       &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;                root  mem       REG              253,1     &lt;span class=&#34;m&#34;&gt;19888&lt;/span&gt;     &lt;span class=&#34;m&#34;&gt;140513&lt;/span&gt; /usr/lib64/libattr.so.1.1.0
systemd       &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;                root  mem       REG              253,1     &lt;span class=&#34;m&#34;&gt;19776&lt;/span&gt;     &lt;span class=&#34;m&#34;&gt;143496&lt;/span&gt; /usr/lib64/libdl-2.17.so
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;实例2查找某个文件相关的进程&#34;&gt;实例2：查找某个文件相关的进程&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ lsof /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;实例3列出某个用户打开的文件信息&#34;&gt;实例3：列出某个用户打开的文件信息&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ lsof -u work
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;实例4列出某个程序进程所打开的文件信息&#34;&gt;实例4：列出某个程序进程所打开的文件信息&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ lsof -c sshd
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;实例5列出某个用户以及某个进程所打开的文件信息&#34;&gt;实例5：列出某个用户以及某个进程所打开的文件信息&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ lsof -u work -c sshd
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;实例6通过某个进程号显示该进程打开的文件&#34;&gt;实例6：通过某个进程号显示该进程打开的文件&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ lsof -p &lt;span class=&#34;m&#34;&gt;7227&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;实例7列出所有的网络连接&#34;&gt;实例7：列出所有的网络连接&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ lsof -i
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;实例8列出所有tcp-网络连接信息&#34;&gt;实例8：列出所有tcp 网络连接信息&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ lsof -i tcp
$ lsof -n -i tcp
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;实例9列出谁在使用某个端口&#34;&gt;实例9：列出谁在使用某个端口&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ lsof -i :3306
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;实例10列出某个用户的所有活跃的网络端口&#34;&gt;实例10：列出某个用户的所有活跃的网络端口&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ lsof -a -u work -i
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;实例11根据文件描述列出对应的文件信息&#34;&gt;实例11：根据文件描述列出对应的文件信息&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ lsof -d &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;说明：&lt;/strong&gt; 0表示标准输入，1表示标准输出，2表示标准错误，从而可知：所以大多数应用程序所打开的文件的 FD 都是从 3 开始。&lt;/p&gt;
&lt;h3 id=&#34;实例12列出被进程号为1234的进程所打开的所有ipv4-network-files&#34;&gt;实例12：列出被进程号为1234的进程所打开的所有IPV4 network files&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ lsof -i &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; -a -p &lt;span class=&#34;m&#34;&gt;1234&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;实例13列出目前连接主机wannx01上端口为202180相关的所有文件信息且每隔3秒重复执行&#34;&gt;实例13：列出目前连接主机wannx01上端口为：20，21，80相关的所有文件信息，且每隔3秒重复执行&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ lsof -i @wannx01:20,21,80 -r &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;实例14查找特定端口运行的进程&#34;&gt;实例14：查找特定端口运行的进程&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ lsof -i TCP:53
$ lsof -i UDP:53
$ lsof -i :53
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;实例15列出ipv4和ipv6的文件&#34;&gt;实例15：列出ipv4和ipv6的文件&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ lsof -i &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;
$ lsof -i &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;实例16列出tcp端口范围1-1024端口&#34;&gt;实例16：列出TCP端口范围1-1024端口&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ lsof -i TCP:1-1024
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;实例17通过脱字符排除某个用户&#34;&gt;实例17：通过脱字符排除某个用户&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ lsof -u^root
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;实例18查找特定用户使用文件和命令&#34;&gt;实例18：查找特定用户使用文件和命令&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ lsof -i -u apache 
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;实例19杀死某个特定用户的所有活动&#34;&gt;实例19：杀死某个特定用户的所有活动&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;kill&lt;/span&gt; -9 &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;lsof -t -u named&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;备注&#34;&gt;备注&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;参考资料&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://kumu-linux.github.io/blog/2013/04/08/lsof/&#34;&gt;lsof在Linux中的10个例子&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>性能测试- [腾讯云 2核4G]</title>
      <link>http://flyingfang.github.io/post/performance-test/</link>
      <pubDate>Sat, 24 Mar 2018 15:27:25 +0800</pubDate>
      
      <guid>http://flyingfang.github.io/post/performance-test/</guid>
      
        <description>&lt;p&gt;前几天腾讯云活动，买了一台服务器用来折腾玩。也想乘机再次开个博客，再次记录一下自己的学习和娱乐。某日再回头看看自己走过的坑，也可能也是一种别样的乐趣。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;一cpu物理个数内核超线程多核心&#34;&gt;一、CPU物理个数、内核、超线程、多核心&lt;/h2&gt;
&lt;h3 id=&#34;1-查看cpu物理个数&#34;&gt;1. 查看CPU物理个数&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ cat /proc/cpuinfo &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep &lt;span class=&#34;s2&#34;&gt;&amp;#34;physical id&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sort &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; uniq &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; wc -l
&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;2-查看cpu内核数&#34;&gt;2. 查看CPU内核数&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ cat /proc/cpuinfo &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep &lt;span class=&#34;s2&#34;&gt;&amp;#34;core id&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sort &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; uniq &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; wc -l
&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;或者&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ cat /proc/cpuinfo &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep &lt;span class=&#34;s2&#34;&gt;&amp;#34;cpu cores&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sort &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; uniq
cpu cores	: &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;3查看cpu的型号&#34;&gt;3.查看CPU的型号&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ cat /proc/cpuinfo &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep &lt;span class=&#34;s2&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; uniq
model name	: Intel&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;R&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; Xeon&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;R&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; CPU E5-26xx v4
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;4-查看cpu的线程数&#34;&gt;4. 查看CPU的线程数&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ cat /proc/cpuinfo &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep &lt;span class=&#34;s2&#34;&gt;&amp;#34;processor&amp;#34;&lt;/span&gt;
processor	: &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
processor	: &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;二内存大小交换空间高速缓存实际使用内存&#34;&gt;二、内存大小、交换空间、高速缓存、实际使用内存&lt;/h2&gt;
&lt;h3 id=&#34;1-查看主机的内存信息&#34;&gt;1. 查看主机的内存信息&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;MemTotal:        &lt;span class=&#34;m&#34;&gt;3882032&lt;/span&gt; kB  &lt;span class=&#34;c1&#34;&gt;# 所有可用的RAM大小&lt;/span&gt;
MemFree:         &lt;span class=&#34;m&#34;&gt;3247784&lt;/span&gt; kB	 &lt;span class=&#34;c1&#34;&gt;# 系统留着未使用的内存&lt;/span&gt;
MemAvailable:    &lt;span class=&#34;m&#34;&gt;3551692&lt;/span&gt; kB
Buffers:          &lt;span class=&#34;m&#34;&gt;100464&lt;/span&gt; kB	 &lt;span class=&#34;c1&#34;&gt;# 给文件做缓冲的大小&lt;/span&gt;
Cached:           &lt;span class=&#34;m&#34;&gt;389504&lt;/span&gt; kB	 &lt;span class=&#34;c1&#34;&gt;# 告诉缓冲存储器内存&lt;/span&gt;
SwapCached:            &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; kB
Active:           &lt;span class=&#34;m&#34;&gt;119048&lt;/span&gt; kB	 &lt;span class=&#34;c1&#34;&gt;# 在活跃使用中的缓冲或高速缓冲存储器页面文件的大小&lt;/span&gt;
Inactive:         &lt;span class=&#34;m&#34;&gt;425532&lt;/span&gt; kB
Active&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;anon&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:      &lt;span class=&#34;m&#34;&gt;54780&lt;/span&gt; kB
Inactive&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;anon&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:      &lt;span class=&#34;m&#34;&gt;168&lt;/span&gt; kB
Active&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;file&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:      &lt;span class=&#34;m&#34;&gt;64268&lt;/span&gt; kB
Inactive&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;file&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:   &lt;span class=&#34;m&#34;&gt;425364&lt;/span&gt; kB
Unevictable:           &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; kB
Mlocked:               &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; kB
SwapTotal:             &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; kB	 &lt;span class=&#34;c1&#34;&gt;# 交换空间的总大小&lt;/span&gt;
SwapFree:              &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; kB	 &lt;span class=&#34;c1&#34;&gt;# 未被使用交换空间的大小&lt;/span&gt;
Dirty:               &lt;span class=&#34;m&#34;&gt;248&lt;/span&gt; kB
Writeback:             &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; kB
AnonPages:         &lt;span class=&#34;m&#34;&gt;54620&lt;/span&gt; kB
Mapped:            &lt;span class=&#34;m&#34;&gt;19704&lt;/span&gt; kB
Shmem:               &lt;span class=&#34;m&#34;&gt;340&lt;/span&gt; kB
Slab:              &lt;span class=&#34;m&#34;&gt;43580&lt;/span&gt; kB
SReclaimable:      &lt;span class=&#34;m&#34;&gt;33968&lt;/span&gt; kB
SUnreclaim:         &lt;span class=&#34;m&#34;&gt;9612&lt;/span&gt; kB
KernelStack:        &lt;span class=&#34;m&#34;&gt;1344&lt;/span&gt; kB
PageTables:         &lt;span class=&#34;m&#34;&gt;2788&lt;/span&gt; kB
NFS_Unstable:          &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; kB
Bounce:                &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; kB
WritebackTmp:          &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; kB
CommitLimit:     &lt;span class=&#34;m&#34;&gt;1941016&lt;/span&gt; kB
Committed_AS:     &lt;span class=&#34;m&#34;&gt;189684&lt;/span&gt; kB
VmallocTotal:   &lt;span class=&#34;m&#34;&gt;34359738367&lt;/span&gt; kB	&lt;span class=&#34;c1&#34;&gt;# 可以vmalloc虚拟内存大小&lt;/span&gt;
VmallocUsed:       &lt;span class=&#34;m&#34;&gt;14000&lt;/span&gt; kB  &lt;span class=&#34;c1&#34;&gt;# 已经被使用的虚拟内存大小&lt;/span&gt;
VmallocChunk:   &lt;span class=&#34;m&#34;&gt;34359715580&lt;/span&gt; kB
HardwareCorrupted:     &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; kB
AnonHugePages:      &lt;span class=&#34;m&#34;&gt;2048&lt;/span&gt; kB
HugePages_Total:       &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
HugePages_Free:        &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
HugePages_Rsvd:        &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
HugePages_Surp:        &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
Hugepagesize:       &lt;span class=&#34;m&#34;&gt;2048&lt;/span&gt; kB
DirectMap4k:       &lt;span class=&#34;m&#34;&gt;26616&lt;/span&gt; kB
DirectMap2M:     &lt;span class=&#34;m&#34;&gt;4167680&lt;/span&gt; kB
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;2实际占用的内存&#34;&gt;2.实际占用的内存&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ free -m
              total        used        free      shared  buff/cache   available
Mem:           &lt;span class=&#34;m&#34;&gt;3791&lt;/span&gt;         &lt;span class=&#34;m&#34;&gt;100&lt;/span&gt;        &lt;span class=&#34;m&#34;&gt;3161&lt;/span&gt;           &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;         &lt;span class=&#34;m&#34;&gt;529&lt;/span&gt;        &lt;span class=&#34;m&#34;&gt;3466&lt;/span&gt;
Swap:             &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;           &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;           &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;三磁盘io读写速度测试&#34;&gt;三、磁盘IO读写速度测试&lt;/h2&gt;
&lt;h3 id=&#34;1磁盘io读写测试&#34;&gt;1.磁盘IO读写测试&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ dd &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/dev/zero &lt;span class=&#34;nv&#34;&gt;of&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;bs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;64k &lt;span class=&#34;nv&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;4k &lt;span class=&#34;nv&#34;&gt;oflag&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;dsync
记录了4096+0 的读入
记录了4096+0 的写出
268435456字节&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;268&lt;/span&gt; MB&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;已复制，149.135 秒，1.8 MB/秒
$ dd &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/dev/zero &lt;span class=&#34;nv&#34;&gt;of&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;bs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;8k &lt;span class=&#34;nv&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;256k &lt;span class=&#34;nv&#34;&gt;conv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;fdatasync
记录了262144+0 的读入
记录了262144+0 的写出
2147483648字节&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2.1 GB&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;已复制，22.196 秒，96.8 MB/秒
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;四网络测试上传下载速度服务器带宽&#34;&gt;四、网络测试：上传下载速度、服务器带宽&lt;/h2&gt;
&lt;h3 id=&#34;1speedtest&#34;&gt;1.speedtest&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ wget -O speedtest-cli https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py
$ chmod +x speedtest-cli
$ ./speedtest-cli --share
Retrieving speedtest.net configuration...
Testing from Tencent cloud computing &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;XX.XX.XX.XX&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;...
Retrieving speedtest.net server list...
Selecting best server based on ping...
Hosted by China Mobile, shandong Branch &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Jinan&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;366.43 km&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;: 20.617 ms
Testing download speed................................................................................
Download: 21.01 Mbit/s
Testing upload speed................................................................................................
Upload: 1.25 Mbit/s
Share results: http://www.speedtest.net/result/7155233924.png
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;五综合性能测试&#34;&gt;五、综合性能测试&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$ wget --no-check-certificate https://github.com/teddysun/across/raw/master/unixbench.sh
$ chmod +x unixbench.sh
$ ./unixbench.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;61
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;62
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;63
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;64
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;65
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;66
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;67
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;68
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;69
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;70
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;71
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;72
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;73
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;74
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;75
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;76
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;77
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;78
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt;
   BYTE UNIX Benchmarks &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Version 5.1.3&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;

   System: VM_22_16_centos: GNU/Linux
   OS: GNU/Linux -- 3.10.0-514.26.2.el7.x86_64 -- &lt;span class=&#34;c1&#34;&gt;#1 SMP Tue Jul 4 15:04:05 UTC 2017&lt;/span&gt;
   Machine: x86_64 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;x86_64&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
   Language: en_US.utf8 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;charmap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;UTF-8&amp;#34;&lt;/span&gt;, &lt;span class=&#34;nv&#34;&gt;collate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;UTF-8&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
   CPU 0: Intel&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;R&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; Xeon&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;R&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; CPU E5-26xx v4 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;4788.9 bogomips&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET
   CPU 1: Intel&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;R&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; Xeon&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;R&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; CPU E5-26xx v4 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;4788.9 bogomips&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
          Hyper-Threading, x86-64, MMX, Physical Address Ext, SYSENTER/SYSEXIT, SYSCALL/SYSRET
   14:38:58 up  3:20,  &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; users,  load average: 0.41, 0.12, 0.13&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; runlevel &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;

------------------------------------------------------------------------
Benchmark Run: 二 3月 &lt;span class=&#34;m&#34;&gt;20&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2018&lt;/span&gt; 14:38:58 - 15:08:10
&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; CPUs in system&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; running &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; parallel copy of tests

Dhrystone &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; using register variables       34359445.8 lps   &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;10.0 s, &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; samples&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Double-Precision Whetstone                     3063.8 MWIPS &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;16.6 s, &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; samples&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Execl Throughput                               4137.5 lps   &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;30.0 s, &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; samples&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
File Copy &lt;span class=&#34;m&#34;&gt;1024&lt;/span&gt; bufsize &lt;span class=&#34;m&#34;&gt;2000&lt;/span&gt; maxblocks        932031.7 KBps  &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;30.0 s, &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; samples&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
File Copy &lt;span class=&#34;m&#34;&gt;256&lt;/span&gt; bufsize &lt;span class=&#34;m&#34;&gt;500&lt;/span&gt; maxblocks          249781.5 KBps  &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;30.0 s, &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; samples&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
File Copy &lt;span class=&#34;m&#34;&gt;4096&lt;/span&gt; bufsize &lt;span class=&#34;m&#34;&gt;8000&lt;/span&gt; maxblocks       2621504.9 KBps  &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;30.0 s, &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; samples&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Pipe Throughput                             1624396.8 lps   &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;10.0 s, &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; samples&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Pipe-based Context Switching                 359410.0 lps   &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;10.0 s, &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; samples&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Process Creation                              11579.6 lps   &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;30.0 s, &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; samples&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Shell Scripts &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; concurrent&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;                   7879.6 lpm   &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;60.0 s, &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; samples&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Shell Scripts &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; concurrent&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;                   1674.6 lpm   &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;60.0 s, &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; samples&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
System Call Overhead                        2769294.4 lps   &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;10.0 s, &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; samples&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;

System Benchmarks Index Values               BASELINE       RESULT    INDEX
Dhrystone &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; using register variables         116700.0   34359445.8   2944.3
Double-Precision Whetstone                       55.0       3063.8    557.1
Execl Throughput                                 43.0       4137.5    962.2
File Copy &lt;span class=&#34;m&#34;&gt;1024&lt;/span&gt; bufsize &lt;span class=&#34;m&#34;&gt;2000&lt;/span&gt; maxblocks          3960.0     932031.7   2353.6
File Copy &lt;span class=&#34;m&#34;&gt;256&lt;/span&gt; bufsize &lt;span class=&#34;m&#34;&gt;500&lt;/span&gt; maxblocks            1655.0     249781.5   1509.3
File Copy &lt;span class=&#34;m&#34;&gt;4096&lt;/span&gt; bufsize &lt;span class=&#34;m&#34;&gt;8000&lt;/span&gt; maxblocks          5800.0    2621504.9   4519.8
Pipe Throughput                               12440.0    1624396.8   1305.8
Pipe-based Context Switching                   4000.0     359410.0    898.5
Process Creation                                126.0      11579.6    919.0
Shell Scripts &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; concurrent&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;                     42.4       7879.6   1858.4
Shell Scripts &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; concurrent&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;                      6.0       1674.6   2791.0
System Call Overhead                          15000.0    2769294.4   1846.2
                                                                   &lt;span class=&#34;o&#34;&gt;========&lt;/span&gt;
System Benchmarks Index Score                                        1590.3

------------------------------------------------------------------------
Benchmark Run: 二 3月 &lt;span class=&#34;m&#34;&gt;20&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2018&lt;/span&gt; 15:08:10 - 15:37:25
&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; CPUs in system&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; running &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; parallel copies of tests

Dhrystone &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; using register variables       68444775.0 lps   &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;10.0 s, &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; samples&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Double-Precision Whetstone                     6177.0 MWIPS &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;16.5 s, &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; samples&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Execl Throughput                               8976.3 lps   &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;30.0 s, &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; samples&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
File Copy &lt;span class=&#34;m&#34;&gt;1024&lt;/span&gt; bufsize &lt;span class=&#34;m&#34;&gt;2000&lt;/span&gt; maxblocks       1160379.5 KBps  &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;30.0 s, &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; samples&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
File Copy &lt;span class=&#34;m&#34;&gt;256&lt;/span&gt; bufsize &lt;span class=&#34;m&#34;&gt;500&lt;/span&gt; maxblocks          321113.0 KBps  &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;30.0 s, &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; samples&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
File Copy &lt;span class=&#34;m&#34;&gt;4096&lt;/span&gt; bufsize &lt;span class=&#34;m&#34;&gt;8000&lt;/span&gt; maxblocks       3506583.5 KBps  &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;30.0 s, &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; samples&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Pipe Throughput                             3217651.0 lps   &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;10.0 s, &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; samples&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Pipe-based Context Switching                 656926.7 lps   &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;10.0 s, &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; samples&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Process Creation                              30308.5 lps   &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;30.0 s, &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; samples&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Shell Scripts &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; concurrent&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;                  12182.9 lpm   &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;60.0 s, &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; samples&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Shell Scripts &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; concurrent&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;                   1709.3 lpm   &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;60.0 s, &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; samples&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
System Call Overhead                        4107364.7 lps   &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;10.0 s, &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; samples&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;

System Benchmarks Index Values               BASELINE       RESULT    INDEX
Dhrystone &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; using register variables         116700.0   68444775.0   5865.0
Double-Precision Whetstone                       55.0       6177.0   1123.1
Execl Throughput                                 43.0       8976.3   2087.5
File Copy &lt;span class=&#34;m&#34;&gt;1024&lt;/span&gt; bufsize &lt;span class=&#34;m&#34;&gt;2000&lt;/span&gt; maxblocks          3960.0    1160379.5   2930.3
File Copy &lt;span class=&#34;m&#34;&gt;256&lt;/span&gt; bufsize &lt;span class=&#34;m&#34;&gt;500&lt;/span&gt; maxblocks            1655.0     321113.0   1940.3
File Copy &lt;span class=&#34;m&#34;&gt;4096&lt;/span&gt; bufsize &lt;span class=&#34;m&#34;&gt;8000&lt;/span&gt; maxblocks          5800.0    3506583.5   6045.8
Pipe Throughput                               12440.0    3217651.0   2586.5
Pipe-based Context Switching                   4000.0     656926.7   1642.3
Process Creation                                126.0      30308.5   2405.4
Shell Scripts &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; concurrent&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;                     42.4      12182.9   2873.3
Shell Scripts &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; concurrent&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;                      6.0       1709.3   2848.9
System Call Overhead                          15000.0    4107364.7   2738.2
                                                                   &lt;span class=&#34;o&#34;&gt;========&lt;/span&gt;
System Benchmarks Index Score                                        2627.5
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;备注&#34;&gt;备注&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;参考资料&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.csdn.net/panjican/article/details/51189587&#34;&gt;基于Linux系统的性能测试&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://yangfannie.com/360.html&#34;&gt;VPS主机性能测试&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/sivel/speedtest-cli&#34;&gt;speedtest&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cloudharmony/unixbench&#34;&gt;UnixBench&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.iamle.com/archives/2335.html&#34;&gt;Linux系统性能测试脚本合集&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>About</title>
      <link>http://flyingfang.github.io/about/</link>
      <pubDate>Thu, 22 Feb 2018 15:40:05 +0800</pubDate>
      
      <guid>http://flyingfang.github.io/about/</guid>
      
        <description>&lt;h2 id=&#34;关于我&#34;&gt;关于我&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;占坑一则😜&lt;/code&gt;&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>
